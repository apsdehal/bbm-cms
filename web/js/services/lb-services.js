// CommonJS package manager support
if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
  // Export the *name* of this Angular module
  // Sample usage:
  //
  //   import lbServices from './lb-services';
  //   angular.module('app', [lbServices]);
  //
  module.exports = "lbServices";
}

(function(window, angular, undefined) {'use strict';

var urlBase = "/api";
var authHeader = 'authorization';

function getHost(url) {
  var m = url.match(/^(?:https?:)?\/\/([^\/]+)/);
  return m ? m[1] : null;
}

var urlBaseHost = getHost(urlBase) || location.host;

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.User
 * @header lbServices.User
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `User` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "User",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Users/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__findById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__findById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__destroyById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__updateById__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__updateById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/accessTokens/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__findById__identities
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find a related item by id for identities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for identities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__findById__identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/identities/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__destroyById__identities
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a related item by id for identities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for identities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/identities/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__updateById__identities
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update a related item by id for identities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for identities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__updateById__identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/identities/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__findById__credentials
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find a related item by id for credentials.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for credentials
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__findById__credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/credentials/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__destroyById__credentials
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a related item by id for credentials.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for credentials
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/credentials/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__updateById__credentials
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update a related item by id for credentials.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for credentials
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__updateById__credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Users/:id/credentials/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__get__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Queries accessTokens of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__get__accessTokens": {
          isArray: true,
          url: urlBase + "/Users/:id/accessTokens",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__create__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__create__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__delete__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Deletes all accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__count__accessTokens
         * @methodOf lbServices.User
         *
         * @description
         *
         * Counts accessTokens of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__accessTokens": {
          url: urlBase + "/Users/:id/accessTokens/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__get__identities
         * @methodOf lbServices.User
         *
         * @description
         *
         * Queries identities of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__get__identities": {
          isArray: true,
          url: urlBase + "/Users/:id/identities",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__create__identities
         * @methodOf lbServices.User
         *
         * @description
         *
         * Creates a new instance in identities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__create__identities": {
          url: urlBase + "/Users/:id/identities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__delete__identities
         * @methodOf lbServices.User
         *
         * @description
         *
         * Deletes all identities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__identities": {
          url: urlBase + "/Users/:id/identities",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__count__identities
         * @methodOf lbServices.User
         *
         * @description
         *
         * Counts identities of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__identities": {
          url: urlBase + "/Users/:id/identities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__get__credentials
         * @methodOf lbServices.User
         *
         * @description
         *
         * Queries credentials of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__get__credentials": {
          isArray: true,
          url: urlBase + "/Users/:id/credentials",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__create__credentials
         * @methodOf lbServices.User
         *
         * @description
         *
         * Creates a new instance in credentials of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$__create__credentials": {
          url: urlBase + "/Users/:id/credentials",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__delete__credentials
         * @methodOf lbServices.User
         *
         * @description
         *
         * Deletes all credentials of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__credentials": {
          url: urlBase + "/Users/:id/credentials",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$__count__credentials
         * @methodOf lbServices.User
         *
         * @description
         *
         * Counts credentials of User.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__credentials": {
          url: urlBase + "/Users/:id/credentials/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#create
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/Users",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#createMany
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/Users",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#upsert
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/Users",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#exists
         * @methodOf lbServices.User
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/Users/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#findById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/Users/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#find
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/Users",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#findOne
         * @methodOf lbServices.User
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/Users/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#updateAll
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/Users/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#deleteById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/Users/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#count
         * @methodOf lbServices.User
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/Users/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#prototype$updateAttributes
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/Users/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#createChangeStream
         * @methodOf lbServices.User
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/Users/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#login
         * @methodOf lbServices.User
         *
         * @description
         *
         * Login a user with username/email and password.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
         *   Default value: `user`.
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The response body contains properties of the AccessToken created on login.
         * Depending on the value of `include` parameter, the body may contain additional properties:
         *
         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
         *
         *
         */
        "login": {
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
          url: urlBase + "/Users/login",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#logout
         * @methodOf lbServices.User
         *
         * @description
         *
         * Logout a user with access token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "logout": {
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
          url: urlBase + "/Users/logout",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#confirm
         * @methodOf lbServices.User
         *
         * @description
         *
         * Confirm a user registration with email verification token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `uid` – `{string}` -
         *
         *  - `token` – `{string}` -
         *
         *  - `redirect` – `{string=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "confirm": {
          url: urlBase + "/Users/confirm",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#resetPassword
         * @methodOf lbServices.User
         *
         * @description
         *
         * Reset password for a user with email.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "resetPassword": {
          url: urlBase + "/Users/reset",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#signup
         * @methodOf lbServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "signup": {
          url: urlBase + "/Users/signup",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#social
         * @methodOf lbServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "social": {
          url: urlBase + "/Users/social",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#reverify
         * @methodOf lbServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "reverify": {
          url: urlBase + "/Users/reverify",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#setPassword
         * @methodOf lbServices.User
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        "setPassword": {
          url: urlBase + "/Users/set-password",
          method: "POST"
        },

        // INTERNAL. Use Page.owner() instead.
        "::get::page::owner": {
          url: urlBase + "/pages/:id/owner",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + "/Users" + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.User#updateOrCreate
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.User#update
         * @methodOf lbServices.User
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.User#destroyById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#removeById
         * @methodOf lbServices.User
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.User#getCachedCurrent
         * @methodOf lbServices.User
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.User#login} or
         * {@link lbServices.User#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A User instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#isAuthenticated
         * @methodOf lbServices.User
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.User#getCurrentId
         * @methodOf lbServices.User
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

    /**
    * @ngdoc property
    * @name lbServices.User#modelName
    * @propertyOf lbServices.User
    * @description
    * The name of the model represented by this $resource,
    * i.e. `User`.
    */
    R.modelName = "User";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Email
 * @header lbServices.Email
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Email` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Email",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Emails/:id",
      { 'id': '@id' },
      {
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Email#modelName
    * @propertyOf lbServices.Email
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Email`.
    */
    R.modelName = "Email";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Product
 * @header lbServices.Product
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Product` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Product",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/products/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Product.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/products/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__get__feed
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Fetches hasOne relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/products/:id/feed",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__create__feed
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Creates a new instance in feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$__create__feed": {
          url: urlBase + "/products/:id/feed",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__update__feed
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$__update__feed": {
          url: urlBase + "/products/:id/feed",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__destroy__feed
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Deletes feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__feed": {
          url: urlBase + "/products/:id/feed",
          method: "DELETE"
        },

        // INTERNAL. Use Product.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.comments.destroyById() instead.
        "prototype$__destroyById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.comments.updateById() instead.
        "prototype$__updateById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.spaceEntity.findById() instead.
        "prototype$__findById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/spaceEntity/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.spaceEntity.destroyById() instead.
        "prototype$__destroyById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/spaceEntity/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.spaceEntity.updateById() instead.
        "prototype$__updateById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/spaceEntity/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__findById__questions
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Find a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$__findById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/questions/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__destroyById__questions
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Delete a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/questions/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__updateById__questions
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update a related item by id for questions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for questions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$__updateById__questions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/questions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Product.shares.findById() instead.
        "prototype$__findById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.shares.destroyById() instead.
        "prototype$__destroyById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.shares.updateById() instead.
        "prototype$__updateById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/products/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Product.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/products/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Product.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/products/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Product.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/products/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Product.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/products/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Product.comments.create() instead.
        "prototype$__create__comments": {
          url: urlBase + "/products/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Product.comments.destroyAll() instead.
        "prototype$__delete__comments": {
          url: urlBase + "/products/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Product.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/products/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Product.spaceEntity() instead.
        "prototype$__get__spaceEntity": {
          isArray: true,
          url: urlBase + "/products/:id/spaceEntity",
          method: "GET"
        },

        // INTERNAL. Use Product.spaceEntity.create() instead.
        "prototype$__create__spaceEntity": {
          url: urlBase + "/products/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Product.spaceEntity.destroyAll() instead.
        "prototype$__delete__spaceEntity": {
          url: urlBase + "/products/:id/spaceEntity",
          method: "DELETE"
        },

        // INTERNAL. Use Product.spaceEntity.count() instead.
        "prototype$__count__spaceEntity": {
          url: urlBase + "/products/:id/spaceEntity/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__get__questions
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Queries questions of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$__get__questions": {
          isArray: true,
          url: urlBase + "/products/:id/questions",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__create__questions
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Creates a new instance in questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$__create__questions": {
          url: urlBase + "/products/:id/questions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__delete__questions
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Deletes all questions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__questions": {
          url: urlBase + "/products/:id/questions",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$__count__questions
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Counts questions of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__questions": {
          url: urlBase + "/products/:id/questions/count",
          method: "GET"
        },

        // INTERNAL. Use Product.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/products/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Product.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/products/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Product.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/products/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Product.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/products/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Product.shares() instead.
        "prototype$__get__shares": {
          isArray: true,
          url: urlBase + "/products/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Product.shares.create() instead.
        "prototype$__create__shares": {
          url: urlBase + "/products/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Product.shares.destroyAll() instead.
        "prototype$__delete__shares": {
          url: urlBase + "/products/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Product.shares.count() instead.
        "prototype$__count__shares": {
          url: urlBase + "/products/:id/shares/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#create
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/products",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#createMany
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/products",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#upsert
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/products",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#exists
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/products/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#findById
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/products/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#find
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/products",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#findOne
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/products/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#updateAll
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/products/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#deleteById
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/products/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#count
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/products/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$updateAttributes
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/products/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#createChangeStream
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/products/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#similar
         * @methodOf lbServices.Product
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `hex` – `{string}` -
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "similar": {
          isArray: true,
          url: urlBase + "/products/similar",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$similarProducts
         * @methodOf lbServices.Product
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$similarProducts": {
          isArray: true,
          url: urlBase + "/products/:id/similar",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$mixNMatch
         * @methodOf lbServices.Product
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$mixNMatch": {
          isArray: true,
          url: urlBase + "/products/:id/mix-n-match",
          method: "GET"
        },

        // INTERNAL. Use Page.products.findById() instead.
        "::findById::page::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/products/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.products.destroyById() instead.
        "::destroyById::page::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/products/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.products.updateById() instead.
        "::updateById::page::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/products/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Page.products() instead.
        "::get::page::products": {
          isArray: true,
          url: urlBase + "/pages/:id/products",
          method: "GET"
        },

        // INTERNAL. Use Page.products.create() instead.
        "::create::page::products": {
          url: urlBase + "/pages/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Page.products.createMany() instead.
        "::createMany::page::products": {
          isArray: true,
          url: urlBase + "/pages/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Page.products.destroyAll() instead.
        "::delete::page::products": {
          url: urlBase + "/pages/:id/products",
          method: "DELETE"
        },

        // INTERNAL. Use Page.products.count() instead.
        "::count::page::products": {
          url: urlBase + "/pages/:id/products/count",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.product() instead.
        "::get::spaceEntity::product": {
          url: urlBase + "/spaceEntities/:id/product",
          method: "GET"
        },

        // INTERNAL. Use Tag.products.findById() instead.
        "::findById::tag::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.products.destroyById() instead.
        "::destroyById::tag::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.products.updateById() instead.
        "::updateById::tag::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.products.link() instead.
        "::link::tag::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.products.unlink() instead.
        "::unlink::tag::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.products.exists() instead.
        "::exists::tag::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.products() instead.
        "::get::tag::products": {
          isArray: true,
          url: urlBase + "/tags/:id/products",
          method: "GET"
        },

        // INTERNAL. Use Tag.products.create() instead.
        "::create::tag::products": {
          url: urlBase + "/tags/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Tag.products.createMany() instead.
        "::createMany::tag::products": {
          isArray: true,
          url: urlBase + "/tags/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Tag.products.destroyAll() instead.
        "::delete::tag::products": {
          url: urlBase + "/tags/:id/products",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.products.count() instead.
        "::count::tag::products": {
          url: urlBase + "/tags/:id/products/count",
          method: "GET"
        },

        // INTERNAL. Use Curation.product() instead.
        "::get::curation::product": {
          url: urlBase + "/curations/:id/product",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Product#updateOrCreate
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Product#update
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Product#destroyById
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Product#removeById
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Product#modelName
    * @propertyOf lbServices.Product
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Product`.
    */
    R.modelName = "Product";


        /**
         * @ngdoc method
         * @name lbServices.Product#page
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::product::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Product.likes
     * @header lbServices.Product.likes
     * @object
     * @description
     *
     * The object `Product.likes` groups methods
     * manipulating `Like` instances related to `Product`.
     *
     * Call {@link lbServices.Product#likes Product.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Product#likes
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Queries likes of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::product::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.likes#count
         * @methodOf lbServices.Product.likes
         *
         * @description
         *
         * Counts likes of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::product::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.likes#create
         * @methodOf lbServices.Product.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::create::product::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.likes#createMany
         * @methodOf lbServices.Product.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::createMany::product::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.likes#destroyAll
         * @methodOf lbServices.Product.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::delete::product::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.likes#destroyById
         * @methodOf lbServices.Product.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::destroyById::product::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.likes#findById
         * @methodOf lbServices.Product.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::findById::product::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.likes#updateById
         * @methodOf lbServices.Product.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::updateById::product::likes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Product.comments
     * @header lbServices.Product.comments
     * @object
     * @description
     *
     * The object `Product.comments` groups methods
     * manipulating `Comment` instances related to `Product`.
     *
     * Call {@link lbServices.Product#comments Product.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Product#comments
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Queries comments of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::get::product::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.comments#count
         * @methodOf lbServices.Product.comments
         *
         * @description
         *
         * Counts comments of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::count::product::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.comments#create
         * @methodOf lbServices.Product.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.create = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::create::product::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.comments#createMany
         * @methodOf lbServices.Product.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::createMany::product::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.comments#destroyAll
         * @methodOf lbServices.Product.comments
         *
         * @description
         *
         * Deletes all comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::delete::product::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.comments#destroyById
         * @methodOf lbServices.Product.comments
         *
         * @description
         *
         * Delete a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::destroyById::product::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.comments#findById
         * @methodOf lbServices.Product.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::findById::product::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.comments#updateById
         * @methodOf lbServices.Product.comments
         *
         * @description
         *
         * Update a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::updateById::product::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Product.spaceEntity
     * @header lbServices.Product.spaceEntity
     * @object
     * @description
     *
     * The object `Product.spaceEntity` groups methods
     * manipulating `SpaceEntity` instances related to `Product`.
     *
     * Call {@link lbServices.Product#spaceEntity Product.spaceEntity()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Product#spaceEntity
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Queries spaceEntity of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::get::product::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.spaceEntity#count
         * @methodOf lbServices.Product.spaceEntity
         *
         * @description
         *
         * Counts spaceEntity of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.spaceEntity.count = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::count::product::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.spaceEntity#create
         * @methodOf lbServices.Product.spaceEntity
         *
         * @description
         *
         * Creates a new instance in spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.create = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::create::product::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.spaceEntity#createMany
         * @methodOf lbServices.Product.spaceEntity
         *
         * @description
         *
         * Creates a new instance in spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.createMany = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::createMany::product::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.spaceEntity#destroyAll
         * @methodOf lbServices.Product.spaceEntity
         *
         * @description
         *
         * Deletes all spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntity.destroyAll = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::delete::product::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.spaceEntity#destroyById
         * @methodOf lbServices.Product.spaceEntity
         *
         * @description
         *
         * Delete a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntity.destroyById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::destroyById::product::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.spaceEntity#findById
         * @methodOf lbServices.Product.spaceEntity
         *
         * @description
         *
         * Find a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.findById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::findById::product::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.spaceEntity#updateById
         * @methodOf lbServices.Product.spaceEntity
         *
         * @description
         *
         * Update a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.updateById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::updateById::product::spaceEntity"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Product.tags
     * @header lbServices.Product.tags
     * @object
     * @description
     *
     * The object `Product.tags` groups methods
     * manipulating `Tag` instances related to `Product`.
     *
     * Call {@link lbServices.Product#tags Product.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Product#tags
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Queries tags of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#count
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Counts tags of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#create
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#createMany
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#destroyAll
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#destroyById
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#exists
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#findById
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#link
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#unlink
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::product::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.tags#updateById
         * @methodOf lbServices.Product.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::product::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Product.shares
     * @header lbServices.Product.shares
     * @object
     * @description
     *
     * The object `Product.shares` groups methods
     * manipulating `Share` instances related to `Product`.
     *
     * Call {@link lbServices.Product#shares Product.shares()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Product#shares
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Queries shares of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::get::product::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.shares#count
         * @methodOf lbServices.Product.shares
         *
         * @description
         *
         * Counts shares of product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.shares.count = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::count::product::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.shares#create
         * @methodOf lbServices.Product.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.create = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::create::product::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.shares#createMany
         * @methodOf lbServices.Product.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.createMany = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::createMany::product::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.shares#destroyAll
         * @methodOf lbServices.Product.shares
         *
         * @description
         *
         * Deletes all shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyAll = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::delete::product::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.shares#destroyById
         * @methodOf lbServices.Product.shares
         *
         * @description
         *
         * Delete a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::destroyById::product::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.shares#findById
         * @methodOf lbServices.Product.shares
         *
         * @description
         *
         * Find a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.findById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::findById::product::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Product.shares#updateById
         * @methodOf lbServices.Product.shares
         *
         * @description
         *
         * Update a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.updateById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::updateById::product::shares"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Fabric
 * @header lbServices.Fabric
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Fabric` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Fabric",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/fabrics/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Fabric#exists
         * @methodOf lbServices.Fabric
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/fabrics/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Fabric#findById
         * @methodOf lbServices.Fabric
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Fabric` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/fabrics/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Fabric#find
         * @methodOf lbServices.Fabric
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Fabric` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/fabrics",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Fabric#findOne
         * @methodOf lbServices.Fabric
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Fabric` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/fabrics/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Fabric#count
         * @methodOf lbServices.Fabric
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/fabrics/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Fabric#similar
         * @methodOf lbServices.Fabric
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `hex` – `{string}` -
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Fabric` object.)
         * </em>
         */
        "similar": {
          isArray: true,
          url: urlBase + "/fabrics/similar",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Fabric#prototype$mixNMatch
         * @methodOf lbServices.Fabric
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Fabric` object.)
         * </em>
         */
        "prototype$mixNMatch": {
          isArray: true,
          url: urlBase + "/fabrics/:id/mix-n-match",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Fabric#modelName
    * @propertyOf lbServices.Fabric
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Fabric`.
    */
    R.modelName = "Fabric";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Image
 * @header lbServices.Image
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Image` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Image",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/images/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Image.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/images/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#prototype$__get__feed
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Fetches hasOne relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/images/:id/feed",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#prototype$__create__feed
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Creates a new instance in feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "prototype$__create__feed": {
          url: urlBase + "/images/:id/feed",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#prototype$__update__feed
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Update feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "prototype$__update__feed": {
          url: urlBase + "/images/:id/feed",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#prototype$__destroy__feed
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Deletes feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__feed": {
          url: urlBase + "/images/:id/feed",
          method: "DELETE"
        },

        // INTERNAL. Use Image.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.comments.destroyById() instead.
        "prototype$__destroyById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.comments.updateById() instead.
        "prototype$__updateById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.spaceEntity.findById() instead.
        "prototype$__findById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/spaceEntity/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.spaceEntity.destroyById() instead.
        "prototype$__destroyById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/spaceEntity/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.spaceEntity.updateById() instead.
        "prototype$__updateById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/spaceEntity/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.project() instead.
        "prototype$__get__project": {
          url: urlBase + "/images/:id/project",
          method: "GET"
        },

        // INTERNAL. Use Image.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Image.shares.findById() instead.
        "prototype$__findById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.shares.destroyById() instead.
        "prototype$__destroyById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.shares.updateById() instead.
        "prototype$__updateById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/images/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Image.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/images/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Image.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/images/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Image.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/images/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Image.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/images/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Image.comments.create() instead.
        "prototype$__create__comments": {
          url: urlBase + "/images/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Image.comments.destroyAll() instead.
        "prototype$__delete__comments": {
          url: urlBase + "/images/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Image.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/images/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Image.spaceEntity() instead.
        "prototype$__get__spaceEntity": {
          isArray: true,
          url: urlBase + "/images/:id/spaceEntity",
          method: "GET"
        },

        // INTERNAL. Use Image.spaceEntity.create() instead.
        "prototype$__create__spaceEntity": {
          url: urlBase + "/images/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Image.spaceEntity.destroyAll() instead.
        "prototype$__delete__spaceEntity": {
          url: urlBase + "/images/:id/spaceEntity",
          method: "DELETE"
        },

        // INTERNAL. Use Image.spaceEntity.count() instead.
        "prototype$__count__spaceEntity": {
          url: urlBase + "/images/:id/spaceEntity/count",
          method: "GET"
        },

        // INTERNAL. Use Image.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/images/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Image.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/images/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Image.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/images/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Image.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/images/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Image.shares() instead.
        "prototype$__get__shares": {
          isArray: true,
          url: urlBase + "/images/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Image.shares.create() instead.
        "prototype$__create__shares": {
          url: urlBase + "/images/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Image.shares.destroyAll() instead.
        "prototype$__delete__shares": {
          url: urlBase + "/images/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Image.shares.count() instead.
        "prototype$__count__shares": {
          url: urlBase + "/images/:id/shares/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#create
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/images",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#createMany
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/images",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#upsert
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/images",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#exists
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/images/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#findById
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/images/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#find
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/images",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#findOne
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/images/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#updateAll
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/images/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#deleteById
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/images/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#count
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/images/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#prototype$updateAttributes
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/images/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#createChangeStream
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/images/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#prototype$similarImages
         * @methodOf lbServices.Image
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "prototype$similarImages": {
          isArray: true,
          url: urlBase + "/images/:id/similar",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#prototype$similarProducts
         * @methodOf lbServices.Image
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "prototype$similarProducts": {
          isArray: true,
          url: urlBase + "/images/:id/similarProducts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#similar
         * @methodOf lbServices.Image
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `hex` – `{string}` -
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "similar": {
          isArray: true,
          url: urlBase + "/images/similar",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#duplicate
         * @methodOf lbServices.Image
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "duplicate": {
          isArray: true,
          url: urlBase + "/images/duplicate",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Image#tag
         * @methodOf lbServices.Image
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `tagId` – `{string}` -
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        "tag": {
          isArray: true,
          url: urlBase + "/images/tag",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.image() instead.
        "::get::spaceEntity::image": {
          url: urlBase + "/spaceEntities/:id/image",
          method: "GET"
        },

        // INTERNAL. Use Project.images.findById() instead.
        "::findById::project::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/images/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.images.destroyById() instead.
        "::destroyById::project::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/images/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.images.updateById() instead.
        "::updateById::project::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/images/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.images() instead.
        "::get::project::images": {
          isArray: true,
          url: urlBase + "/projects/:id/images",
          method: "GET"
        },

        // INTERNAL. Use Project.images.create() instead.
        "::create::project::images": {
          url: urlBase + "/projects/:id/images",
          method: "POST"
        },

        // INTERNAL. Use Project.images.createMany() instead.
        "::createMany::project::images": {
          isArray: true,
          url: urlBase + "/projects/:id/images",
          method: "POST"
        },

        // INTERNAL. Use Project.images.destroyAll() instead.
        "::delete::project::images": {
          url: urlBase + "/projects/:id/images",
          method: "DELETE"
        },

        // INTERNAL. Use Project.images.count() instead.
        "::count::project::images": {
          url: urlBase + "/projects/:id/images/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.images.findById() instead.
        "::findById::tag::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.images.destroyById() instead.
        "::destroyById::tag::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.images.updateById() instead.
        "::updateById::tag::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.images.link() instead.
        "::link::tag::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.images.unlink() instead.
        "::unlink::tag::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.images.exists() instead.
        "::exists::tag::images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.images() instead.
        "::get::tag::images": {
          isArray: true,
          url: urlBase + "/tags/:id/images",
          method: "GET"
        },

        // INTERNAL. Use Tag.images.create() instead.
        "::create::tag::images": {
          url: urlBase + "/tags/:id/images",
          method: "POST"
        },

        // INTERNAL. Use Tag.images.createMany() instead.
        "::createMany::tag::images": {
          isArray: true,
          url: urlBase + "/tags/:id/images",
          method: "POST"
        },

        // INTERNAL. Use Tag.images.destroyAll() instead.
        "::delete::tag::images": {
          url: urlBase + "/tags/:id/images",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.images.count() instead.
        "::count::tag::images": {
          url: urlBase + "/tags/:id/images/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Image#updateOrCreate
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Image#update
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Image#destroyById
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Image#removeById
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Image#modelName
    * @propertyOf lbServices.Image
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Image`.
    */
    R.modelName = "Image";


        /**
         * @ngdoc method
         * @name lbServices.Image#page
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::image::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Image.likes
     * @header lbServices.Image.likes
     * @object
     * @description
     *
     * The object `Image.likes` groups methods
     * manipulating `Like` instances related to `Image`.
     *
     * Call {@link lbServices.Image#likes Image.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Image#likes
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Queries likes of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::image::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.likes#count
         * @methodOf lbServices.Image.likes
         *
         * @description
         *
         * Counts likes of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::image::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.likes#create
         * @methodOf lbServices.Image.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::create::image::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.likes#createMany
         * @methodOf lbServices.Image.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::createMany::image::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.likes#destroyAll
         * @methodOf lbServices.Image.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::delete::image::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.likes#destroyById
         * @methodOf lbServices.Image.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::destroyById::image::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.likes#findById
         * @methodOf lbServices.Image.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::findById::image::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.likes#updateById
         * @methodOf lbServices.Image.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::updateById::image::likes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Image.comments
     * @header lbServices.Image.comments
     * @object
     * @description
     *
     * The object `Image.comments` groups methods
     * manipulating `Comment` instances related to `Image`.
     *
     * Call {@link lbServices.Image#comments Image.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Image#comments
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Queries comments of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::get::image::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.comments#count
         * @methodOf lbServices.Image.comments
         *
         * @description
         *
         * Counts comments of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::count::image::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.comments#create
         * @methodOf lbServices.Image.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.create = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::create::image::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.comments#createMany
         * @methodOf lbServices.Image.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::createMany::image::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.comments#destroyAll
         * @methodOf lbServices.Image.comments
         *
         * @description
         *
         * Deletes all comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::delete::image::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.comments#destroyById
         * @methodOf lbServices.Image.comments
         *
         * @description
         *
         * Delete a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::destroyById::image::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.comments#findById
         * @methodOf lbServices.Image.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::findById::image::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.comments#updateById
         * @methodOf lbServices.Image.comments
         *
         * @description
         *
         * Update a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::updateById::image::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Image.spaceEntity
     * @header lbServices.Image.spaceEntity
     * @object
     * @description
     *
     * The object `Image.spaceEntity` groups methods
     * manipulating `SpaceEntity` instances related to `Image`.
     *
     * Call {@link lbServices.Image#spaceEntity Image.spaceEntity()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Image#spaceEntity
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Queries spaceEntity of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::get::image::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.spaceEntity#count
         * @methodOf lbServices.Image.spaceEntity
         *
         * @description
         *
         * Counts spaceEntity of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.spaceEntity.count = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::count::image::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.spaceEntity#create
         * @methodOf lbServices.Image.spaceEntity
         *
         * @description
         *
         * Creates a new instance in spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.create = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::create::image::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.spaceEntity#createMany
         * @methodOf lbServices.Image.spaceEntity
         *
         * @description
         *
         * Creates a new instance in spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.createMany = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::createMany::image::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.spaceEntity#destroyAll
         * @methodOf lbServices.Image.spaceEntity
         *
         * @description
         *
         * Deletes all spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntity.destroyAll = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::delete::image::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.spaceEntity#destroyById
         * @methodOf lbServices.Image.spaceEntity
         *
         * @description
         *
         * Delete a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntity.destroyById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::destroyById::image::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.spaceEntity#findById
         * @methodOf lbServices.Image.spaceEntity
         *
         * @description
         *
         * Find a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.findById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::findById::image::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.spaceEntity#updateById
         * @methodOf lbServices.Image.spaceEntity
         *
         * @description
         *
         * Update a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.updateById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::updateById::image::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image#project
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Fetches belongsTo relation project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.project = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::get::image::project"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Image.tags
     * @header lbServices.Image.tags
     * @object
     * @description
     *
     * The object `Image.tags` groups methods
     * manipulating `Tag` instances related to `Image`.
     *
     * Call {@link lbServices.Image#tags Image.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Image#tags
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Queries tags of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#count
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Counts tags of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#create
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#createMany
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#destroyAll
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#destroyById
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#exists
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#findById
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#link
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#unlink
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::image::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.tags#updateById
         * @methodOf lbServices.Image.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::image::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Image.shares
     * @header lbServices.Image.shares
     * @object
     * @description
     *
     * The object `Image.shares` groups methods
     * manipulating `Share` instances related to `Image`.
     *
     * Call {@link lbServices.Image#shares Image.shares()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Image#shares
         * @methodOf lbServices.Image
         *
         * @description
         *
         * Queries shares of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::get::image::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.shares#count
         * @methodOf lbServices.Image.shares
         *
         * @description
         *
         * Counts shares of image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.shares.count = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::count::image::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.shares#create
         * @methodOf lbServices.Image.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.create = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::create::image::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.shares#createMany
         * @methodOf lbServices.Image.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.createMany = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::createMany::image::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.shares#destroyAll
         * @methodOf lbServices.Image.shares
         *
         * @description
         *
         * Deletes all shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyAll = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::delete::image::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.shares#destroyById
         * @methodOf lbServices.Image.shares
         *
         * @description
         *
         * Delete a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::destroyById::image::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.shares#findById
         * @methodOf lbServices.Image.shares
         *
         * @description
         *
         * Find a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.findById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::findById::image::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Image.shares#updateById
         * @methodOf lbServices.Image.shares
         *
         * @description
         *
         * Update a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.updateById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::updateById::image::shares"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Paint
 * @header lbServices.Paint
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Paint` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Paint",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/paints/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Paint#exists
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/paints/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Paint#findById
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Paint` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/paints/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Paint#find
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Paint` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/paints",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Paint#findOne
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Paint` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/paints/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Paint#count
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/paints/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Paint#similar
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `hex` – `{string}` -
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Paint` object.)
         * </em>
         */
        "similar": {
          isArray: true,
          url: urlBase + "/paints/similar",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Paint#bestMatchPerBrand
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `hex` – `{string}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Paint` object.)
         * </em>
         */
        "bestMatchPerBrand": {
          isArray: true,
          url: urlBase + "/paints/best-match-per-brand",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Paint#shadecards
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Paint` object.)
         * </em>
         */
        "shadecards": {
          url: urlBase + "/paints/shadecards",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Paint#info
         * @methodOf lbServices.Paint
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Paint` object.)
         * </em>
         */
        "info": {
          url: urlBase + "/paints/info",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Paint#modelName
    * @propertyOf lbServices.Paint
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Paint`.
    */
    R.modelName = "Paint";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Fusion
 * @header lbServices.Fusion
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Fusion` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Fusion",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/fusions/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Fusion#shopByColor
         * @methodOf lbServices.Fusion
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `hex` – `{string}` -
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Fusion` object.)
         * </em>
         */
        "shopByColor": {
          url: urlBase + "/fusions/shop-by-color",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Fusion#modelName
    * @propertyOf lbServices.Fusion
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Fusion`.
    */
    R.modelName = "Fusion";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Controller
 * @header lbServices.Controller
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Controller` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Controller",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/controllers/:id",
      { 'id': '@id' },
      {
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Controller#modelName
    * @propertyOf lbServices.Controller
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Controller`.
    */
    R.modelName = "Controller";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Job
 * @header lbServices.Job
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Job` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Job",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/jobs/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Job#create
         * @methodOf lbServices.Job
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Job` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/jobs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Job#createMany
         * @methodOf lbServices.Job
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Job` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/jobs",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Job#exists
         * @methodOf lbServices.Job
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/jobs/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Job#findById
         * @methodOf lbServices.Job
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Job` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/jobs/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Job#find
         * @methodOf lbServices.Job
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Job` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/jobs",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Job#findOne
         * @methodOf lbServices.Job
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Job` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/jobs/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Job#count
         * @methodOf lbServices.Job
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/jobs/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Job#prototype$cancelById
         * @methodOf lbServices.Job
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method does not accept any data. Supply an empty object.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$cancelById": {
          url: urlBase + "/jobs/:id/cancel",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Job#cancelAll
         * @methodOf lbServices.Job
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `where` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Job` object.)
         * </em>
         */
        "cancelAll": {
          isArray: true,
          url: urlBase + "/jobs/cancel",
          method: "POST"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Job#modelName
    * @propertyOf lbServices.Job
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Job`.
    */
    R.modelName = "Job";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Page
 * @header lbServices.Page
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Page` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Page",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/pages/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Page.owner() instead.
        "prototype$__get__owner": {
          url: urlBase + "/pages/:id/owner",
          method: "GET"
        },

        // INTERNAL. Use Page.products.findById() instead.
        "prototype$__findById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/products/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.products.destroyById() instead.
        "prototype$__destroyById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/products/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.products.updateById() instead.
        "prototype$__updateById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/products/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__findById__followers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a related item by id for followers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for followers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__findById__followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/followers/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__exists__followers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Check the existence of followers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for followers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__exists__followers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/followers/rel/:fk",
          method: "HEAD"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__findById__followees
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a related item by id for followees.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for followees
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__findById__followees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/followees/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__link__followees
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Add a related item by id for followees.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for followees
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__link__followees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/followees/rel/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__unlink__followees
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Remove the followees relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for followees
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__unlink__followees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/followees/rel/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__exists__followees
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Check the existence of followees relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for followees
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__exists__followees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/followees/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Page.activities.findById() instead.
        "prototype$__findById__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/activities/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__findById__myproducts
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a related item by id for myproducts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for myproducts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__findById__myproducts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myproducts/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__destroyById__myproducts
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Delete a related item by id for myproducts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for myproducts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__myproducts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myproducts/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__updateById__myproducts
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update a related item by id for myproducts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for myproducts
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__updateById__myproducts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myproducts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Page.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/comments/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__findById__members
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a related item by id for members.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for members
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__findById__members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/members/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__destroyById__members
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Delete a related item by id for members.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for members
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__members": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/members/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__findById__wall
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a related item by id for wall.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for wall
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__findById__wall": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/wall/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__findById__timeline
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a related item by id for timeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timeline
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__findById__timeline": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/timeline/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.myspace.findById() instead.
        "prototype$__findById__myspace": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myspace/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.myspace.destroyById() instead.
        "prototype$__destroyById__myspace": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myspace/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.myspace.updateById() instead.
        "prototype$__updateById__myspace": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myspace/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__profile
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Fetches hasOne relation profile.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__profile": {
          url: urlBase + "/pages/:id/profile",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__create__profile
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Creates a new instance in profile of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__create__profile": {
          url: urlBase + "/pages/:id/profile",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__update__profile
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update profile of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__update__profile": {
          url: urlBase + "/pages/:id/profile",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__destroy__profile
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Deletes profile of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__profile": {
          url: urlBase + "/pages/:id/profile",
          method: "DELETE"
        },

        // INTERNAL. Use Page.spaceEntities.findById() instead.
        "prototype$__findById__spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/spaceEntities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.spaceEntities.destroyById() instead.
        "prototype$__destroyById__spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/spaceEntities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.spaceEntities.updateById() instead.
        "prototype$__updateById__spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/spaceEntities/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__findById__moodboards
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a related item by id for moodboards.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for moodboards
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__findById__moodboards": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/moodboards/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__destroyById__moodboards
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Delete a related item by id for moodboards.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for moodboards
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__moodboards": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/moodboards/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__updateById__moodboards
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update a related item by id for moodboards.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for moodboards
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__updateById__moodboards": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/moodboards/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Page.projects.findById() instead.
        "prototype$__findById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/projects/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.projects.destroyById() instead.
        "prototype$__destroyById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/projects/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.projects.updateById() instead.
        "prototype$__updateById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/projects/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__company
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Fetches hasOne relation company.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__company": {
          url: urlBase + "/pages/:id/company",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__create__company
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Creates a new instance in company of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__create__company": {
          url: urlBase + "/pages/:id/company",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__update__company
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update company of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__update__company": {
          url: urlBase + "/pages/:id/company",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__destroy__company
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Deletes company of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__company": {
          url: urlBase + "/pages/:id/company",
          method: "DELETE"
        },

        // INTERNAL. Use Page.reviews.findById() instead.
        "prototype$__findById__reviews": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/reviews/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.reviews.destroyById() instead.
        "prototype$__destroyById__reviews": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/reviews/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.reviews.updateById() instead.
        "prototype$__updateById__reviews": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/reviews/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__findById__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a related item by id for tagfollowers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__findById__tagfollowers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/tagfollowers/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__destroyById__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Delete a related item by id for tagfollowers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__tagfollowers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/tagfollowers/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__updateById__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update a related item by id for tagfollowers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__updateById__tagfollowers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/tagfollowers/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__link__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Add a related item by id for tagfollowers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__link__tagfollowers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/tagfollowers/rel/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__unlink__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Remove the tagfollowers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__unlink__tagfollowers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/tagfollowers/rel/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__exists__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Check the existence of tagfollowers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__exists__tagfollowers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/tagfollowers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Page.sendbirds() instead.
        "prototype$__get__sendbirds": {
          url: urlBase + "/pages/:id/sendbirds",
          method: "GET"
        },

        // INTERNAL. Use Page.sendbirds.create() instead.
        "prototype$__create__sendbirds": {
          url: urlBase + "/pages/:id/sendbirds",
          method: "POST"
        },

        // INTERNAL. Use Page.sendbirds.update() instead.
        "prototype$__update__sendbirds": {
          url: urlBase + "/pages/:id/sendbirds",
          method: "PUT"
        },

        // INTERNAL. Use Page.sendbirds.destroy() instead.
        "prototype$__destroy__sendbirds": {
          url: urlBase + "/pages/:id/sendbirds",
          method: "DELETE"
        },

        // INTERNAL. Use Page.products() instead.
        "prototype$__get__products": {
          isArray: true,
          url: urlBase + "/pages/:id/products",
          method: "GET"
        },

        // INTERNAL. Use Page.products.create() instead.
        "prototype$__create__products": {
          url: urlBase + "/pages/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Page.products.destroyAll() instead.
        "prototype$__delete__products": {
          url: urlBase + "/pages/:id/products",
          method: "DELETE"
        },

        // INTERNAL. Use Page.products.count() instead.
        "prototype$__count__products": {
          url: urlBase + "/pages/:id/products/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__followers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries followers of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__followers": {
          isArray: true,
          url: urlBase + "/pages/:id/followers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__count__followers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Counts followers of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__followers": {
          url: urlBase + "/pages/:id/followers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__followees
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries followees of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__followees": {
          isArray: true,
          url: urlBase + "/pages/:id/followees",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__count__followees
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Counts followees of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__followees": {
          url: urlBase + "/pages/:id/followees/count",
          method: "GET"
        },

        // INTERNAL. Use Page.activities() instead.
        "prototype$__get__activities": {
          isArray: true,
          url: urlBase + "/pages/:id/activities",
          method: "GET"
        },

        // INTERNAL. Use Page.activities.count() instead.
        "prototype$__count__activities": {
          url: urlBase + "/pages/:id/activities/count",
          method: "GET"
        },

        // INTERNAL. Use Page.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/pages/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Page.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/pages/:id/likes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__myproducts
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries myproducts of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__myproducts": {
          isArray: true,
          url: urlBase + "/pages/:id/myproducts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__create__myproducts
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Creates a new instance in myproducts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__create__myproducts": {
          url: urlBase + "/pages/:id/myproducts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__delete__myproducts
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Deletes all myproducts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__myproducts": {
          url: urlBase + "/pages/:id/myproducts",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__count__myproducts
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Counts myproducts of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__myproducts": {
          url: urlBase + "/pages/:id/myproducts/count",
          method: "GET"
        },

        // INTERNAL. Use Page.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/pages/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Page.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/pages/:id/comments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__members
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries members of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__members": {
          isArray: true,
          url: urlBase + "/pages/:id/members",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__create__members
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Creates a new instance in members of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__create__members": {
          url: urlBase + "/pages/:id/members",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__count__members
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Counts members of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__members": {
          url: urlBase + "/pages/:id/members/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__wall
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries wall of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__wall": {
          isArray: true,
          url: urlBase + "/pages/:id/wall",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__count__wall
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Counts wall of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__wall": {
          url: urlBase + "/pages/:id/wall/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__timeline
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries timeline of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__timeline": {
          isArray: true,
          url: urlBase + "/pages/:id/timeline",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__count__timeline
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Counts timeline of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__timeline": {
          url: urlBase + "/pages/:id/timeline/count",
          method: "GET"
        },

        // INTERNAL. Use Page.myspace() instead.
        "prototype$__get__myspace": {
          isArray: true,
          url: urlBase + "/pages/:id/myspace",
          method: "GET"
        },

        // INTERNAL. Use Page.myspace.create() instead.
        "prototype$__create__myspace": {
          url: urlBase + "/pages/:id/myspace",
          method: "POST"
        },

        // INTERNAL. Use Page.myspace.destroyAll() instead.
        "prototype$__delete__myspace": {
          url: urlBase + "/pages/:id/myspace",
          method: "DELETE"
        },

        // INTERNAL. Use Page.myspace.count() instead.
        "prototype$__count__myspace": {
          url: urlBase + "/pages/:id/myspace/count",
          method: "GET"
        },

        // INTERNAL. Use Page.spaceEntities() instead.
        "prototype$__get__spaceEntities": {
          isArray: true,
          url: urlBase + "/pages/:id/spaceEntities",
          method: "GET"
        },

        // INTERNAL. Use Page.spaceEntities.create() instead.
        "prototype$__create__spaceEntities": {
          url: urlBase + "/pages/:id/spaceEntities",
          method: "POST"
        },

        // INTERNAL. Use Page.spaceEntities.destroyAll() instead.
        "prototype$__delete__spaceEntities": {
          url: urlBase + "/pages/:id/spaceEntities",
          method: "DELETE"
        },

        // INTERNAL. Use Page.spaceEntities.count() instead.
        "prototype$__count__spaceEntities": {
          url: urlBase + "/pages/:id/spaceEntities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__moodboards
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries moodboards of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__moodboards": {
          isArray: true,
          url: urlBase + "/pages/:id/moodboards",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__create__moodboards
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Creates a new instance in moodboards of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__create__moodboards": {
          url: urlBase + "/pages/:id/moodboards",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__delete__moodboards
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Deletes all moodboards of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__moodboards": {
          url: urlBase + "/pages/:id/moodboards",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__count__moodboards
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Counts moodboards of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__moodboards": {
          url: urlBase + "/pages/:id/moodboards/count",
          method: "GET"
        },

        // INTERNAL. Use Page.projects() instead.
        "prototype$__get__projects": {
          isArray: true,
          url: urlBase + "/pages/:id/projects",
          method: "GET"
        },

        // INTERNAL. Use Page.projects.create() instead.
        "prototype$__create__projects": {
          url: urlBase + "/pages/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use Page.projects.destroyAll() instead.
        "prototype$__delete__projects": {
          url: urlBase + "/pages/:id/projects",
          method: "DELETE"
        },

        // INTERNAL. Use Page.projects.count() instead.
        "prototype$__count__projects": {
          url: urlBase + "/pages/:id/projects/count",
          method: "GET"
        },

        // INTERNAL. Use Page.reviews() instead.
        "prototype$__get__reviews": {
          isArray: true,
          url: urlBase + "/pages/:id/reviews",
          method: "GET"
        },

        // INTERNAL. Use Page.reviews.create() instead.
        "prototype$__create__reviews": {
          url: urlBase + "/pages/:id/reviews",
          method: "POST"
        },

        // INTERNAL. Use Page.reviews.destroyAll() instead.
        "prototype$__delete__reviews": {
          url: urlBase + "/pages/:id/reviews",
          method: "DELETE"
        },

        // INTERNAL. Use Page.reviews.count() instead.
        "prototype$__count__reviews": {
          url: urlBase + "/pages/:id/reviews/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__get__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries tagfollowers of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__get__tagfollowers": {
          isArray: true,
          url: urlBase + "/pages/:id/tagfollowers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__create__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Creates a new instance in tagfollowers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$__create__tagfollowers": {
          url: urlBase + "/pages/:id/tagfollowers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__delete__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Deletes all tagfollowers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__tagfollowers": {
          url: urlBase + "/pages/:id/tagfollowers",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$__count__tagfollowers
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Counts tagfollowers of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__tagfollowers": {
          url: urlBase + "/pages/:id/tagfollowers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#create
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/pages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#createMany
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/pages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#exists
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/pages/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#findById
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/pages/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#find
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/pages",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#count
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/pages/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$updateAttributes
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/pages/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$upload
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Uploads a file
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `space` – `{string}` -
         *
         *  - `category` – `{string}` -
         *
         * @param {Object} postData Request data.
         *
         *  - `ctx` – `{object=}` -
         *
         *  - `url` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$upload": {
          url: urlBase + "/pages/:id/myproducts/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$profileImage
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Uploads a file
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `options` – `{object=}` -
         *
         * @param {Object} postData Request data.
         *
         *  - `ctx` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$profileImage": {
          url: urlBase + "/pages/:id/profileImage",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#findByName
         * @methodOf lbServices.Page
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `name` – `{string}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "findByName": {
          url: urlBase + "/pages/byname",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#default
         * @methodOf lbServices.Page
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "default": {
          url: urlBase + "/pages/default",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$profileBuilder
         * @methodOf lbServices.Page
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         *  - `ctx` – `{object=}` -
         *
         *  - `data` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$profileBuilder": {
          url: urlBase + "/pages/:id/profileBuilder",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#trending
         * @methodOf lbServices.Page
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `type` – `{string}` -
         *
         *  - `limit` – `{string}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "trending": {
          url: urlBase + "/pages/trending",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#brands
         * @methodOf lbServices.Page
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `limit` – `{string}` -
         *
         *  - `offset` – `{string}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "brands": {
          url: urlBase + "/pages/brands",
          method: "GET"
        },

        // INTERNAL. Use Product.page() instead.
        "::get::product::page": {
          url: urlBase + "/products/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Image.page() instead.
        "::get::image::page": {
          url: urlBase + "/images/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Activity.page() instead.
        "::get::activity::page": {
          url: urlBase + "/activities/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Like.page() instead.
        "::get::like::page": {
          url: urlBase + "/likes/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Comment.page() instead.
        "::get::comment::page": {
          url: urlBase + "/comments/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Timeline.page() instead.
        "::get::timeline::page": {
          url: urlBase + "/timelines/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Space.page() instead.
        "::get::space::page": {
          url: urlBase + "/spaces/:id/page",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.page() instead.
        "::get::spaceEntity::page": {
          url: urlBase + "/spaceEntities/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Article.page() instead.
        "::get::article::page": {
          url: urlBase + "/articles/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Discussion.page() instead.
        "::get::discussion::page": {
          url: urlBase + "/discussions/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Project.page() instead.
        "::get::project::page": {
          url: urlBase + "/projects/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Review.reviewee() instead.
        "::get::review::reviewee": {
          url: urlBase + "/reviews/:id/reviewee",
          method: "GET"
        },

        // INTERNAL. Use Review.reviewer() instead.
        "::get::review::reviewer": {
          url: urlBase + "/reviews/:id/reviewer",
          method: "GET"
        },

        // INTERNAL. Use Tagfollow.tagfollower() instead.
        "::get::tagfollow::tagfollower": {
          url: urlBase + "/tagfollows/:id/tagfollower",
          method: "GET"
        },

        // INTERNAL. Use Share.page() instead.
        "::get::share::page": {
          url: urlBase + "/shares/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Post.page() instead.
        "::get::post::page": {
          url: urlBase + "/posts/:id/page",
          method: "GET"
        },

        // INTERNAL. Use GetInTouch.page() instead.
        "::get::getInTouch::page": {
          url: urlBase + "/getInTouches/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Invite.page() instead.
        "::get::invite::page": {
          url: urlBase + "/invites/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Contact.page() instead.
        "::get::contact::page": {
          url: urlBase + "/contacts/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Sendbird.page() instead.
        "::get::sendbird::page": {
          url: urlBase + "/sendbirds/:id/page",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Page#modelName
    * @propertyOf lbServices.Page
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Page`.
    */
    R.modelName = "Page";


        /**
         * @ngdoc method
         * @name lbServices.Page#owner
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Fetches belongsTo relation owner.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `User` object.)
         * </em>
         */
        R.owner = function() {
          var TargetResource = $injector.get("User");
          var action = TargetResource["::get::page::owner"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.products
     * @header lbServices.Page.products
     * @object
     * @description
     *
     * The object `Page.products` groups methods
     * manipulating `Product` instances related to `Page`.
     *
     * Call {@link lbServices.Page#products Page.products()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#products
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries products of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::page::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.products#count
         * @methodOf lbServices.Page.products
         *
         * @description
         *
         * Counts products of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.products.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::page::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.products#create
         * @methodOf lbServices.Page.products
         *
         * @description
         *
         * Creates a new instance in products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::page::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.products#createMany
         * @methodOf lbServices.Page.products
         *
         * @description
         *
         * Creates a new instance in products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::page::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.products#destroyAll
         * @methodOf lbServices.Page.products
         *
         * @description
         *
         * Deletes all products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.products.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::page::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.products#destroyById
         * @methodOf lbServices.Page.products
         *
         * @description
         *
         * Delete a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.products.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::page::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.products#findById
         * @methodOf lbServices.Page.products
         *
         * @description
         *
         * Find a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::page::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.products#updateById
         * @methodOf lbServices.Page.products
         *
         * @description
         *
         * Update a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::page::products"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.activities
     * @header lbServices.Page.activities
     * @object
     * @description
     *
     * The object `Page.activities` groups methods
     * manipulating `Activity` instances related to `Page`.
     *
     * Call {@link lbServices.Page#activities Page.activities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#activities
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries activities of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::page::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.activities#count
         * @methodOf lbServices.Page.activities
         *
         * @description
         *
         * Counts activities of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.activities.count = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::count::page::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.activities#findById
         * @methodOf lbServices.Page.activities
         *
         * @description
         *
         * Find a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.findById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::findById::page::activities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.comments
     * @header lbServices.Page.comments
     * @object
     * @description
     *
     * The object `Page.comments` groups methods
     * manipulating `Comment` instances related to `Page`.
     *
     * Call {@link lbServices.Page#comments Page.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#comments
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries comments of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::get::page::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.comments#count
         * @methodOf lbServices.Page.comments
         *
         * @description
         *
         * Counts comments of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::count::page::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.comments#findById
         * @methodOf lbServices.Page.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::findById::page::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.myspace
     * @header lbServices.Page.myspace
     * @object
     * @description
     *
     * The object `Page.myspace` groups methods
     * manipulating `Space` instances related to `Page`.
     *
     * Call {@link lbServices.Page#myspace Page.myspace()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#myspace
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries myspace of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.myspace = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::get::page::myspace"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.myspace#count
         * @methodOf lbServices.Page.myspace
         *
         * @description
         *
         * Counts myspace of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.myspace.count = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::count::page::myspace"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.myspace#create
         * @methodOf lbServices.Page.myspace
         *
         * @description
         *
         * Creates a new instance in myspace of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.myspace.create = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::create::page::myspace"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.myspace#createMany
         * @methodOf lbServices.Page.myspace
         *
         * @description
         *
         * Creates a new instance in myspace of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.myspace.createMany = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::createMany::page::myspace"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.myspace#destroyAll
         * @methodOf lbServices.Page.myspace
         *
         * @description
         *
         * Deletes all myspace of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.myspace.destroyAll = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::delete::page::myspace"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.myspace#destroyById
         * @methodOf lbServices.Page.myspace
         *
         * @description
         *
         * Delete a related item by id for myspace.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for myspace
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.myspace.destroyById = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::destroyById::page::myspace"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.myspace#findById
         * @methodOf lbServices.Page.myspace
         *
         * @description
         *
         * Find a related item by id for myspace.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for myspace
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.myspace.findById = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::findById::page::myspace"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.myspace#updateById
         * @methodOf lbServices.Page.myspace
         *
         * @description
         *
         * Update a related item by id for myspace.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for myspace
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.myspace.updateById = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::updateById::page::myspace"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.spaceEntities
     * @header lbServices.Page.spaceEntities
     * @object
     * @description
     *
     * The object `Page.spaceEntities` groups methods
     * manipulating `SpaceEntity` instances related to `Page`.
     *
     * Call {@link lbServices.Page#spaceEntities Page.spaceEntities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#spaceEntities
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries spaceEntities of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::get::page::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.spaceEntities#count
         * @methodOf lbServices.Page.spaceEntities
         *
         * @description
         *
         * Counts spaceEntities of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.spaceEntities.count = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::count::page::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.spaceEntities#create
         * @methodOf lbServices.Page.spaceEntities
         *
         * @description
         *
         * Creates a new instance in spaceEntities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities.create = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::create::page::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.spaceEntities#createMany
         * @methodOf lbServices.Page.spaceEntities
         *
         * @description
         *
         * Creates a new instance in spaceEntities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities.createMany = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::createMany::page::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.spaceEntities#destroyAll
         * @methodOf lbServices.Page.spaceEntities
         *
         * @description
         *
         * Deletes all spaceEntities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntities.destroyAll = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::delete::page::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.spaceEntities#destroyById
         * @methodOf lbServices.Page.spaceEntities
         *
         * @description
         *
         * Delete a related item by id for spaceEntities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntities.destroyById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::destroyById::page::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.spaceEntities#findById
         * @methodOf lbServices.Page.spaceEntities
         *
         * @description
         *
         * Find a related item by id for spaceEntities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities.findById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::findById::page::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.spaceEntities#updateById
         * @methodOf lbServices.Page.spaceEntities
         *
         * @description
         *
         * Update a related item by id for spaceEntities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities.updateById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::updateById::page::spaceEntities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.projects
     * @header lbServices.Page.projects
     * @object
     * @description
     *
     * The object `Page.projects` groups methods
     * manipulating `Project` instances related to `Page`.
     *
     * Call {@link lbServices.Page#projects Page.projects()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#projects
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries projects of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::get::page::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.projects#count
         * @methodOf lbServices.Page.projects
         *
         * @description
         *
         * Counts projects of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.projects.count = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::count::page::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.projects#create
         * @methodOf lbServices.Page.projects
         *
         * @description
         *
         * Creates a new instance in projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.create = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::create::page::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.projects#createMany
         * @methodOf lbServices.Page.projects
         *
         * @description
         *
         * Creates a new instance in projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.createMany = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::createMany::page::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.projects#destroyAll
         * @methodOf lbServices.Page.projects
         *
         * @description
         *
         * Deletes all projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.projects.destroyAll = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::delete::page::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.projects#destroyById
         * @methodOf lbServices.Page.projects
         *
         * @description
         *
         * Delete a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.projects.destroyById = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::destroyById::page::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.projects#findById
         * @methodOf lbServices.Page.projects
         *
         * @description
         *
         * Find a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.findById = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::findById::page::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.projects#updateById
         * @methodOf lbServices.Page.projects
         *
         * @description
         *
         * Update a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.updateById = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::updateById::page::projects"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.reviews
     * @header lbServices.Page.reviews
     * @object
     * @description
     *
     * The object `Page.reviews` groups methods
     * manipulating `Review` instances related to `Page`.
     *
     * Call {@link lbServices.Page#reviews Page.reviews()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#reviews
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries reviews of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        R.reviews = function() {
          var TargetResource = $injector.get("Review");
          var action = TargetResource["::get::page::reviews"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.reviews#count
         * @methodOf lbServices.Page.reviews
         *
         * @description
         *
         * Counts reviews of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.reviews.count = function() {
          var TargetResource = $injector.get("Review");
          var action = TargetResource["::count::page::reviews"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.reviews#create
         * @methodOf lbServices.Page.reviews
         *
         * @description
         *
         * Creates a new instance in reviews of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        R.reviews.create = function() {
          var TargetResource = $injector.get("Review");
          var action = TargetResource["::create::page::reviews"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.reviews#createMany
         * @methodOf lbServices.Page.reviews
         *
         * @description
         *
         * Creates a new instance in reviews of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        R.reviews.createMany = function() {
          var TargetResource = $injector.get("Review");
          var action = TargetResource["::createMany::page::reviews"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.reviews#destroyAll
         * @methodOf lbServices.Page.reviews
         *
         * @description
         *
         * Deletes all reviews of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.reviews.destroyAll = function() {
          var TargetResource = $injector.get("Review");
          var action = TargetResource["::delete::page::reviews"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.reviews#destroyById
         * @methodOf lbServices.Page.reviews
         *
         * @description
         *
         * Delete a related item by id for reviews.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for reviews
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.reviews.destroyById = function() {
          var TargetResource = $injector.get("Review");
          var action = TargetResource["::destroyById::page::reviews"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.reviews#findById
         * @methodOf lbServices.Page.reviews
         *
         * @description
         *
         * Find a related item by id for reviews.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for reviews
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        R.reviews.findById = function() {
          var TargetResource = $injector.get("Review");
          var action = TargetResource["::findById::page::reviews"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.reviews#updateById
         * @methodOf lbServices.Page.reviews
         *
         * @description
         *
         * Update a related item by id for reviews.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for reviews
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        R.reviews.updateById = function() {
          var TargetResource = $injector.get("Review");
          var action = TargetResource["::updateById::page::reviews"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.sendbirds
     * @header lbServices.Page.sendbirds
     * @object
     * @description
     *
     * The object `Page.sendbirds` groups methods
     * manipulating `Sendbird` instances related to `Page`.
     *
     * Call {@link lbServices.Page#sendbirds Page.sendbirds()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#sendbirds
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Fetches hasOne relation sendbirds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        R.sendbirds = function() {
          var TargetResource = $injector.get("Sendbird");
          var action = TargetResource["::get::page::sendbirds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.sendbirds#create
         * @methodOf lbServices.Page.sendbirds
         *
         * @description
         *
         * Creates a new instance in sendbirds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        R.sendbirds.create = function() {
          var TargetResource = $injector.get("Sendbird");
          var action = TargetResource["::create::page::sendbirds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.sendbirds#createMany
         * @methodOf lbServices.Page.sendbirds
         *
         * @description
         *
         * Creates a new instance in sendbirds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        R.sendbirds.createMany = function() {
          var TargetResource = $injector.get("Sendbird");
          var action = TargetResource["::createMany::page::sendbirds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.sendbirds#destroy
         * @methodOf lbServices.Page.sendbirds
         *
         * @description
         *
         * Deletes sendbirds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.sendbirds.destroy = function() {
          var TargetResource = $injector.get("Sendbird");
          var action = TargetResource["::destroy::page::sendbirds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.sendbirds#update
         * @methodOf lbServices.Page.sendbirds
         *
         * @description
         *
         * Update sendbirds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        R.sendbirds.update = function() {
          var TargetResource = $injector.get("Sendbird");
          var action = TargetResource["::update::page::sendbirds"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Page.likes
     * @header lbServices.Page.likes
     * @object
     * @description
     *
     * The object `Page.likes` groups methods
     * manipulating `Like` instances related to `Page`.
     *
     * Call {@link lbServices.Page#likes Page.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Page#likes
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Queries likes of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::page::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Page.likes#count
         * @methodOf lbServices.Page.likes
         *
         * @description
         *
         * Counts likes of page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::page::likes"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Container",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/containers/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Container#getContainers
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainers": {
          isArray: true,
          url: urlBase + "/containers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#createContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "createContainer": {
          url: urlBase + "/containers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#destroyContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` -
         */
        "destroyContainer": {
          url: urlBase + "/containers/:container",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainer": {
          url: urlBase + "/containers/:container",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getFiles
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFiles": {
          isArray: true,
          url: urlBase + "/containers/:container/files",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getFile
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` -
         *
         *  - `file` – `{string=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#removeFile
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` -
         *
         *  - `file` – `{string=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` -
         */
        "removeFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#upload
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` -
         *
         *  - `res` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` -
         */
        "upload": {
          url: urlBase + "/containers/:container/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#download
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` -
         *
         *  - `file` – `{string=}` -
         *
         *  - `req` – `{object=}` -
         *
         *  - `res` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "download": {
          url: urlBase + "/containers/:container/download/:file",
          method: "GET"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Container#modelName
    * @propertyOf lbServices.Container
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Container`.
    */
    R.modelName = "Container";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Media
 * @header lbServices.Media
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Media` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Media",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/media/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Media#upload
         * @methodOf lbServices.Media
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` -
         *
         *  - `res` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` -
         */
        "upload": {
          url: urlBase + "/media/upload",
          method: "POST"
        },
      }
    );




    /**
    * @ngdoc property
    * @name lbServices.Media#modelName
    * @propertyOf lbServices.Media
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Media`.
    */
    R.modelName = "Media";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Activity
 * @header lbServices.Activity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Activity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Activity",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/activities/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Activity.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/activities/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__get__feed
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Fetches belongsTo relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/activities/:id/feed",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__findById__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Find a related item by id for walls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for walls
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "prototype$__findById__walls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/walls/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__destroyById__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Delete a related item by id for walls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for walls
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__walls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/walls/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__updateById__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Update a related item by id for walls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for walls
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "prototype$__updateById__walls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/walls/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__link__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Add a related item by id for walls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for walls
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "prototype$__link__walls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/walls/rel/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__unlink__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Remove the walls relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for walls
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__unlink__walls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/walls/rel/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__exists__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Check the existence of walls relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for walls
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "prototype$__exists__walls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/walls/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Activity.timelines.findById() instead.
        "prototype$__findById__timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/:fk",
          method: "GET"
        },

        // INTERNAL. Use Activity.timelines.destroyById() instead.
        "prototype$__destroyById__timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.timelines.updateById() instead.
        "prototype$__updateById__timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Activity.timelines.link() instead.
        "prototype$__link__timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Activity.timelines.unlink() instead.
        "prototype$__unlink__timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.timelines.exists() instead.
        "prototype$__exists__timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Activity.tagtimelines.findById() instead.
        "prototype$__findById__tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/:fk",
          method: "GET"
        },

        // INTERNAL. Use Activity.tagtimelines.destroyById() instead.
        "prototype$__destroyById__tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.tagtimelines.updateById() instead.
        "prototype$__updateById__tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Activity.tagtimelines.link() instead.
        "prototype$__link__tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Activity.tagtimelines.unlink() instead.
        "prototype$__unlink__tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.tagtimelines.exists() instead.
        "prototype$__exists__tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/rel/:fk",
          method: "HEAD"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__get__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Queries walls of activity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "prototype$__get__walls": {
          isArray: true,
          url: urlBase + "/activities/:id/walls",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__create__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Creates a new instance in walls of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "prototype$__create__walls": {
          url: urlBase + "/activities/:id/walls",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__delete__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Deletes all walls of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__walls": {
          url: urlBase + "/activities/:id/walls",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$__count__walls
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Counts walls of activity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__walls": {
          url: urlBase + "/activities/:id/walls/count",
          method: "GET"
        },

        // INTERNAL. Use Activity.timelines() instead.
        "prototype$__get__timelines": {
          isArray: true,
          url: urlBase + "/activities/:id/timelines",
          method: "GET"
        },

        // INTERNAL. Use Activity.timelines.create() instead.
        "prototype$__create__timelines": {
          url: urlBase + "/activities/:id/timelines",
          method: "POST"
        },

        // INTERNAL. Use Activity.timelines.destroyAll() instead.
        "prototype$__delete__timelines": {
          url: urlBase + "/activities/:id/timelines",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.timelines.count() instead.
        "prototype$__count__timelines": {
          url: urlBase + "/activities/:id/timelines/count",
          method: "GET"
        },

        // INTERNAL. Use Activity.tagtimelines() instead.
        "prototype$__get__tagtimelines": {
          isArray: true,
          url: urlBase + "/activities/:id/tagtimelines",
          method: "GET"
        },

        // INTERNAL. Use Activity.tagtimelines.create() instead.
        "prototype$__create__tagtimelines": {
          url: urlBase + "/activities/:id/tagtimelines",
          method: "POST"
        },

        // INTERNAL. Use Activity.tagtimelines.destroyAll() instead.
        "prototype$__delete__tagtimelines": {
          url: urlBase + "/activities/:id/tagtimelines",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.tagtimelines.count() instead.
        "prototype$__count__tagtimelines": {
          url: urlBase + "/activities/:id/tagtimelines/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#create
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/activities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#createMany
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/activities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#upsert
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/activities",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#exists
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/activities/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#findById
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/activities/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#find
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/activities",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#findOne
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/activities/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#updateAll
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/activities/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#deleteById
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/activities/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#count
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/activities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#prototype$updateAttributes
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/activities/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Activity#createChangeStream
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/activities/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Page.activities.findById() instead.
        "::findById::page::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/activities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.activities() instead.
        "::get::page::activities": {
          isArray: true,
          url: urlBase + "/pages/:id/activities",
          method: "GET"
        },

        // INTERNAL. Use Page.activities.count() instead.
        "::count::page::activities": {
          url: urlBase + "/pages/:id/activities/count",
          method: "GET"
        },

        // INTERNAL. Use Timeline.activities.findById() instead.
        "::findById::timeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Timeline.activities.destroyById() instead.
        "::destroyById::timeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Timeline.activities.updateById() instead.
        "::updateById::timeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Timeline.activities.link() instead.
        "::link::timeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Timeline.activities.unlink() instead.
        "::unlink::timeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Timeline.activities.exists() instead.
        "::exists::timeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Timeline.activities() instead.
        "::get::timeline::activities": {
          isArray: true,
          url: urlBase + "/timelines/:id/activities",
          method: "GET"
        },

        // INTERNAL. Use Timeline.activities.create() instead.
        "::create::timeline::activities": {
          url: urlBase + "/timelines/:id/activities",
          method: "POST"
        },

        // INTERNAL. Use Timeline.activities.createMany() instead.
        "::createMany::timeline::activities": {
          isArray: true,
          url: urlBase + "/timelines/:id/activities",
          method: "POST"
        },

        // INTERNAL. Use Timeline.activities.destroyAll() instead.
        "::delete::timeline::activities": {
          url: urlBase + "/timelines/:id/activities",
          method: "DELETE"
        },

        // INTERNAL. Use Timeline.activities.count() instead.
        "::count::timeline::activities": {
          url: urlBase + "/timelines/:id/activities/count",
          method: "GET"
        },

        // INTERNAL. Use Tagtimeline.activities.findById() instead.
        "::findById::tagtimeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tagtimeline.activities.destroyById() instead.
        "::destroyById::tagtimeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tagtimeline.activities.updateById() instead.
        "::updateById::tagtimeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tagtimeline.activities.link() instead.
        "::link::tagtimeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tagtimeline.activities.unlink() instead.
        "::unlink::tagtimeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tagtimeline.activities.exists() instead.
        "::exists::tagtimeline::activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tagtimeline.activities() instead.
        "::get::tagtimeline::activities": {
          isArray: true,
          url: urlBase + "/tagtimelines/:id/activities",
          method: "GET"
        },

        // INTERNAL. Use Tagtimeline.activities.create() instead.
        "::create::tagtimeline::activities": {
          url: urlBase + "/tagtimelines/:id/activities",
          method: "POST"
        },

        // INTERNAL. Use Tagtimeline.activities.createMany() instead.
        "::createMany::tagtimeline::activities": {
          isArray: true,
          url: urlBase + "/tagtimelines/:id/activities",
          method: "POST"
        },

        // INTERNAL. Use Tagtimeline.activities.destroyAll() instead.
        "::delete::tagtimeline::activities": {
          url: urlBase + "/tagtimelines/:id/activities",
          method: "DELETE"
        },

        // INTERNAL. Use Tagtimeline.activities.count() instead.
        "::count::tagtimeline::activities": {
          url: urlBase + "/tagtimelines/:id/activities/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Activity#updateOrCreate
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Activity#update
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Activity#destroyById
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Activity#removeById
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Activity#modelName
    * @propertyOf lbServices.Activity
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Activity`.
    */
    R.modelName = "Activity";


        /**
         * @ngdoc method
         * @name lbServices.Activity#page
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::activity::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Activity.timelines
     * @header lbServices.Activity.timelines
     * @object
     * @description
     *
     * The object `Activity.timelines` groups methods
     * manipulating `Timeline` instances related to `Activity`.
     *
     * Call {@link lbServices.Activity#timelines Activity.timelines()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Activity#timelines
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Queries timelines of activity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R.timelines = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::get::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#count
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Counts timelines of activity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.timelines.count = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::count::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#create
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Creates a new instance in timelines of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R.timelines.create = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::create::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#createMany
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Creates a new instance in timelines of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R.timelines.createMany = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::createMany::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#destroyAll
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Deletes all timelines of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.timelines.destroyAll = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::delete::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#destroyById
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Delete a related item by id for timelines.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timelines
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.timelines.destroyById = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::destroyById::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#exists
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Check the existence of timelines relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timelines
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R.timelines.exists = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::exists::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#findById
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Find a related item by id for timelines.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timelines
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R.timelines.findById = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::findById::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#link
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Add a related item by id for timelines.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timelines
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R.timelines.link = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::link::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#unlink
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Remove the timelines relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timelines
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.timelines.unlink = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::unlink::activity::timelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.timelines#updateById
         * @methodOf lbServices.Activity.timelines
         *
         * @description
         *
         * Update a related item by id for timelines.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timelines
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R.timelines.updateById = function() {
          var TargetResource = $injector.get("Timeline");
          var action = TargetResource["::updateById::activity::timelines"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Activity.tagtimelines
     * @header lbServices.Activity.tagtimelines
     * @object
     * @description
     *
     * The object `Activity.tagtimelines` groups methods
     * manipulating `Tagtimeline` instances related to `Activity`.
     *
     * Call {@link lbServices.Activity#tagtimelines Activity.tagtimelines()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Activity#tagtimelines
         * @methodOf lbServices.Activity
         *
         * @description
         *
         * Queries tagtimelines of activity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R.tagtimelines = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::get::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#count
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Counts tagtimelines of activity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.tagtimelines.count = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::count::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#create
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Creates a new instance in tagtimelines of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R.tagtimelines.create = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::create::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#createMany
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Creates a new instance in tagtimelines of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R.tagtimelines.createMany = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::createMany::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#destroyAll
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Deletes all tagtimelines of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tagtimelines.destroyAll = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::delete::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#destroyById
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Delete a related item by id for tagtimelines.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagtimelines
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tagtimelines.destroyById = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::destroyById::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#exists
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Check the existence of tagtimelines relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagtimelines
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R.tagtimelines.exists = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::exists::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#findById
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Find a related item by id for tagtimelines.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagtimelines
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R.tagtimelines.findById = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::findById::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#link
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Add a related item by id for tagtimelines.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagtimelines
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R.tagtimelines.link = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::link::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#unlink
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Remove the tagtimelines relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagtimelines
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tagtimelines.unlink = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::unlink::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Activity.tagtimelines#updateById
         * @methodOf lbServices.Activity.tagtimelines
         *
         * @description
         *
         * Update a related item by id for tagtimelines.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagtimelines
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R.tagtimelines.updateById = function() {
          var TargetResource = $injector.get("Tagtimeline");
          var action = TargetResource["::updateById::activity::tagtimelines"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Like
 * @header lbServices.Like
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Like` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Like",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/likes/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Like.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/likes/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#prototype$__get__entityLike
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Fetches belongsTo relation entityLike.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "prototype$__get__entityLike": {
          url: urlBase + "/likes/:id/entityLike",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#create
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/likes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#createMany
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/likes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#upsert
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/likes",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#exists
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/likes/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#findById
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/likes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#find
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/likes",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#findOne
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/likes/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#updateAll
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/likes/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#deleteById
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/likes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#count
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/likes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#prototype$updateAttributes
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/likes/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Like#createChangeStream
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/likes/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Product.likes.findById() instead.
        "::findById::product::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.likes.destroyById() instead.
        "::destroyById::product::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.likes.updateById() instead.
        "::updateById::product::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.likes() instead.
        "::get::product::likes": {
          isArray: true,
          url: urlBase + "/products/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Product.likes.create() instead.
        "::create::product::likes": {
          url: urlBase + "/products/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Product.likes.createMany() instead.
        "::createMany::product::likes": {
          isArray: true,
          url: urlBase + "/products/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Product.likes.destroyAll() instead.
        "::delete::product::likes": {
          url: urlBase + "/products/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Product.likes.count() instead.
        "::count::product::likes": {
          url: urlBase + "/products/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Image.likes.findById() instead.
        "::findById::image::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.likes.destroyById() instead.
        "::destroyById::image::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.likes.updateById() instead.
        "::updateById::image::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.likes() instead.
        "::get::image::likes": {
          isArray: true,
          url: urlBase + "/images/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Image.likes.create() instead.
        "::create::image::likes": {
          url: urlBase + "/images/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Image.likes.createMany() instead.
        "::createMany::image::likes": {
          isArray: true,
          url: urlBase + "/images/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Image.likes.destroyAll() instead.
        "::delete::image::likes": {
          url: urlBase + "/images/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Image.likes.count() instead.
        "::count::image::likes": {
          url: urlBase + "/images/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Page.likes() instead.
        "::get::page::likes": {
          isArray: true,
          url: urlBase + "/pages/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Page.likes.count() instead.
        "::count::page::likes": {
          url: urlBase + "/pages/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Comment.likes.findById() instead.
        "::findById::comment::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/comments/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Comment.likes.destroyById() instead.
        "::destroyById::comment::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/comments/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Comment.likes.updateById() instead.
        "::updateById::comment::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/comments/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Comment.likes() instead.
        "::get::comment::likes": {
          isArray: true,
          url: urlBase + "/comments/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Comment.likes.create() instead.
        "::create::comment::likes": {
          url: urlBase + "/comments/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Comment.likes.createMany() instead.
        "::createMany::comment::likes": {
          isArray: true,
          url: urlBase + "/comments/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Comment.likes.destroyAll() instead.
        "::delete::comment::likes": {
          url: urlBase + "/comments/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Comment.likes.count() instead.
        "::count::comment::likes": {
          url: urlBase + "/comments/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Space.likes.findById() instead.
        "::findById::space::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.likes.destroyById() instead.
        "::destroyById::space::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.likes.updateById() instead.
        "::updateById::space::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.likes() instead.
        "::get::space::likes": {
          isArray: true,
          url: urlBase + "/spaces/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Space.likes.create() instead.
        "::create::space::likes": {
          url: urlBase + "/spaces/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Space.likes.createMany() instead.
        "::createMany::space::likes": {
          isArray: true,
          url: urlBase + "/spaces/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Space.likes.destroyAll() instead.
        "::delete::space::likes": {
          url: urlBase + "/spaces/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Space.likes.count() instead.
        "::count::space::likes": {
          url: urlBase + "/spaces/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Article.likes.findById() instead.
        "::findById::article::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.likes.destroyById() instead.
        "::destroyById::article::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.likes.updateById() instead.
        "::updateById::article::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.likes() instead.
        "::get::article::likes": {
          isArray: true,
          url: urlBase + "/articles/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Article.likes.create() instead.
        "::create::article::likes": {
          url: urlBase + "/articles/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Article.likes.createMany() instead.
        "::createMany::article::likes": {
          isArray: true,
          url: urlBase + "/articles/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Article.likes.destroyAll() instead.
        "::delete::article::likes": {
          url: urlBase + "/articles/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Article.likes.count() instead.
        "::count::article::likes": {
          url: urlBase + "/articles/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Discussion.likes.findById() instead.
        "::findById::discussion::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Discussion.likes.destroyById() instead.
        "::destroyById::discussion::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.likes.updateById() instead.
        "::updateById::discussion::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.likes() instead.
        "::get::discussion::likes": {
          isArray: true,
          url: urlBase + "/discussions/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Discussion.likes.create() instead.
        "::create::discussion::likes": {
          url: urlBase + "/discussions/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Discussion.likes.createMany() instead.
        "::createMany::discussion::likes": {
          isArray: true,
          url: urlBase + "/discussions/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Discussion.likes.destroyAll() instead.
        "::delete::discussion::likes": {
          url: urlBase + "/discussions/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.likes.count() instead.
        "::count::discussion::likes": {
          url: urlBase + "/discussions/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Project.likes.findById() instead.
        "::findById::project::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.likes.destroyById() instead.
        "::destroyById::project::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.likes.updateById() instead.
        "::updateById::project::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.likes() instead.
        "::get::project::likes": {
          isArray: true,
          url: urlBase + "/projects/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Project.likes.create() instead.
        "::create::project::likes": {
          url: urlBase + "/projects/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Project.likes.createMany() instead.
        "::createMany::project::likes": {
          isArray: true,
          url: urlBase + "/projects/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Project.likes.destroyAll() instead.
        "::delete::project::likes": {
          url: urlBase + "/projects/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Project.likes.count() instead.
        "::count::project::likes": {
          url: urlBase + "/projects/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Post.likes.findById() instead.
        "::findById::post::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Post.likes.destroyById() instead.
        "::destroyById::post::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.likes.updateById() instead.
        "::updateById::post::likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.likes() instead.
        "::get::post::likes": {
          isArray: true,
          url: urlBase + "/posts/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Post.likes.create() instead.
        "::create::post::likes": {
          url: urlBase + "/posts/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Post.likes.createMany() instead.
        "::createMany::post::likes": {
          isArray: true,
          url: urlBase + "/posts/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Post.likes.destroyAll() instead.
        "::delete::post::likes": {
          url: urlBase + "/posts/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Post.likes.count() instead.
        "::count::post::likes": {
          url: urlBase + "/posts/:id/likes/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Like#updateOrCreate
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Like#update
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Like#destroyById
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Like#removeById
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Like#modelName
    * @propertyOf lbServices.Like
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Like`.
    */
    R.modelName = "Like";


        /**
         * @ngdoc method
         * @name lbServices.Like#page
         * @methodOf lbServices.Like
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::like::page"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Comment
 * @header lbServices.Comment
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Comment` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Comment",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/comments/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Comment.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/comments/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#prototype$__get__entityComment
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Fetches belongsTo relation entityComment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "prototype$__get__entityComment": {
          url: urlBase + "/comments/:id/entityComment",
          method: "GET"
        },

        // INTERNAL. Use Comment.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/comments/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Comment.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/comments/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Comment.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/comments/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Comment.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/comments/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Comment.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/comments/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Comment.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/comments/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Comment.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/comments/:id/likes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#create
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/comments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#createMany
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/comments",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#upsert
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/comments",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#exists
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/comments/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#findById
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/comments/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#find
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/comments",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#findOne
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/comments/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#updateAll
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/comments/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#deleteById
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/comments/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#count
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/comments/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#prototype$updateAttributes
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/comments/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Comment#createChangeStream
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/comments/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Product.comments.findById() instead.
        "::findById::product::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.comments.destroyById() instead.
        "::destroyById::product::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.comments.updateById() instead.
        "::updateById::product::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.comments() instead.
        "::get::product::comments": {
          isArray: true,
          url: urlBase + "/products/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Product.comments.create() instead.
        "::create::product::comments": {
          url: urlBase + "/products/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Product.comments.createMany() instead.
        "::createMany::product::comments": {
          isArray: true,
          url: urlBase + "/products/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Product.comments.destroyAll() instead.
        "::delete::product::comments": {
          url: urlBase + "/products/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Product.comments.count() instead.
        "::count::product::comments": {
          url: urlBase + "/products/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Image.comments.findById() instead.
        "::findById::image::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.comments.destroyById() instead.
        "::destroyById::image::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.comments.updateById() instead.
        "::updateById::image::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.comments() instead.
        "::get::image::comments": {
          isArray: true,
          url: urlBase + "/images/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Image.comments.create() instead.
        "::create::image::comments": {
          url: urlBase + "/images/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Image.comments.createMany() instead.
        "::createMany::image::comments": {
          isArray: true,
          url: urlBase + "/images/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Image.comments.destroyAll() instead.
        "::delete::image::comments": {
          url: urlBase + "/images/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Image.comments.count() instead.
        "::count::image::comments": {
          url: urlBase + "/images/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Page.comments.findById() instead.
        "::findById::page::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.comments() instead.
        "::get::page::comments": {
          isArray: true,
          url: urlBase + "/pages/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Page.comments.count() instead.
        "::count::page::comments": {
          url: urlBase + "/pages/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Space.comments.findById() instead.
        "::findById::space::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.comments.destroyById() instead.
        "::destroyById::space::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.comments.updateById() instead.
        "::updateById::space::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.comments() instead.
        "::get::space::comments": {
          isArray: true,
          url: urlBase + "/spaces/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Space.comments.create() instead.
        "::create::space::comments": {
          url: urlBase + "/spaces/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Space.comments.createMany() instead.
        "::createMany::space::comments": {
          isArray: true,
          url: urlBase + "/spaces/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Space.comments.destroyAll() instead.
        "::delete::space::comments": {
          url: urlBase + "/spaces/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Space.comments.count() instead.
        "::count::space::comments": {
          url: urlBase + "/spaces/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Article.comments.findById() instead.
        "::findById::article::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.comments.destroyById() instead.
        "::destroyById::article::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.comments.updateById() instead.
        "::updateById::article::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.comments() instead.
        "::get::article::comments": {
          isArray: true,
          url: urlBase + "/articles/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Article.comments.create() instead.
        "::create::article::comments": {
          url: urlBase + "/articles/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Article.comments.createMany() instead.
        "::createMany::article::comments": {
          isArray: true,
          url: urlBase + "/articles/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Article.comments.destroyAll() instead.
        "::delete::article::comments": {
          url: urlBase + "/articles/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Article.comments.count() instead.
        "::count::article::comments": {
          url: urlBase + "/articles/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Discussion.comments.findById() instead.
        "::findById::discussion::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Discussion.comments.destroyById() instead.
        "::destroyById::discussion::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.comments.updateById() instead.
        "::updateById::discussion::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.comments() instead.
        "::get::discussion::comments": {
          isArray: true,
          url: urlBase + "/discussions/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Discussion.comments.create() instead.
        "::create::discussion::comments": {
          url: urlBase + "/discussions/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Discussion.comments.createMany() instead.
        "::createMany::discussion::comments": {
          isArray: true,
          url: urlBase + "/discussions/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Discussion.comments.destroyAll() instead.
        "::delete::discussion::comments": {
          url: urlBase + "/discussions/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.comments.count() instead.
        "::count::discussion::comments": {
          url: urlBase + "/discussions/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Project.comments.findById() instead.
        "::findById::project::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.comments.destroyById() instead.
        "::destroyById::project::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.comments.updateById() instead.
        "::updateById::project::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.comments() instead.
        "::get::project::comments": {
          isArray: true,
          url: urlBase + "/projects/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Project.comments.create() instead.
        "::create::project::comments": {
          url: urlBase + "/projects/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Project.comments.createMany() instead.
        "::createMany::project::comments": {
          isArray: true,
          url: urlBase + "/projects/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Project.comments.destroyAll() instead.
        "::delete::project::comments": {
          url: urlBase + "/projects/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Project.comments.count() instead.
        "::count::project::comments": {
          url: urlBase + "/projects/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Post.comments.findById() instead.
        "::findById::post::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Post.comments.destroyById() instead.
        "::destroyById::post::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.comments.updateById() instead.
        "::updateById::post::comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.comments() instead.
        "::get::post::comments": {
          isArray: true,
          url: urlBase + "/posts/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Post.comments.create() instead.
        "::create::post::comments": {
          url: urlBase + "/posts/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Post.comments.createMany() instead.
        "::createMany::post::comments": {
          isArray: true,
          url: urlBase + "/posts/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Post.comments.destroyAll() instead.
        "::delete::post::comments": {
          url: urlBase + "/posts/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Post.comments.count() instead.
        "::count::post::comments": {
          url: urlBase + "/posts/:id/comments/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Comment#updateOrCreate
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Comment#update
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Comment#destroyById
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Comment#removeById
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Comment#modelName
    * @propertyOf lbServices.Comment
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Comment`.
    */
    R.modelName = "Comment";


        /**
         * @ngdoc method
         * @name lbServices.Comment#page
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::comment::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Comment.likes
     * @header lbServices.Comment.likes
     * @object
     * @description
     *
     * The object `Comment.likes` groups methods
     * manipulating `Like` instances related to `Comment`.
     *
     * Call {@link lbServices.Comment#likes Comment.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Comment#likes
         * @methodOf lbServices.Comment
         *
         * @description
         *
         * Queries likes of comment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::comment::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Comment.likes#count
         * @methodOf lbServices.Comment.likes
         *
         * @description
         *
         * Counts likes of comment.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::comment::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Comment.likes#create
         * @methodOf lbServices.Comment.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::create::comment::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Comment.likes#createMany
         * @methodOf lbServices.Comment.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::createMany::comment::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Comment.likes#destroyAll
         * @methodOf lbServices.Comment.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::delete::comment::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Comment.likes#destroyById
         * @methodOf lbServices.Comment.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::destroyById::comment::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Comment.likes#findById
         * @methodOf lbServices.Comment.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::findById::comment::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Comment.likes#updateById
         * @methodOf lbServices.Comment.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::updateById::comment::likes"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Timeline
 * @header lbServices.Timeline
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Timeline` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Timeline",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/timelines/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Timeline.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/timelines/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#prototype$__get__feed
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Fetches belongsTo relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/timelines/:id/feed",
          method: "GET"
        },

        // INTERNAL. Use Timeline.activities.findById() instead.
        "prototype$__findById__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Timeline.activities.destroyById() instead.
        "prototype$__destroyById__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Timeline.activities.updateById() instead.
        "prototype$__updateById__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Timeline.activities.link() instead.
        "prototype$__link__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Timeline.activities.unlink() instead.
        "prototype$__unlink__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Timeline.activities.exists() instead.
        "prototype$__exists__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/timelines/:id/activities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Timeline.activities() instead.
        "prototype$__get__activities": {
          isArray: true,
          url: urlBase + "/timelines/:id/activities",
          method: "GET"
        },

        // INTERNAL. Use Timeline.activities.create() instead.
        "prototype$__create__activities": {
          url: urlBase + "/timelines/:id/activities",
          method: "POST"
        },

        // INTERNAL. Use Timeline.activities.destroyAll() instead.
        "prototype$__delete__activities": {
          url: urlBase + "/timelines/:id/activities",
          method: "DELETE"
        },

        // INTERNAL. Use Timeline.activities.count() instead.
        "prototype$__count__activities": {
          url: urlBase + "/timelines/:id/activities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#create
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/timelines",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#createMany
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/timelines",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#upsert
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/timelines",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#exists
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/timelines/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#findById
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/timelines/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#find
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/timelines",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#findOne
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/timelines/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#updateAll
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/timelines/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#deleteById
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/timelines/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#count
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/timelines/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#prototype$updateAttributes
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/timelines/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Timeline#createChangeStream
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/timelines/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Activity.timelines.findById() instead.
        "::findById::activity::timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/:fk",
          method: "GET"
        },

        // INTERNAL. Use Activity.timelines.destroyById() instead.
        "::destroyById::activity::timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.timelines.updateById() instead.
        "::updateById::activity::timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Activity.timelines.link() instead.
        "::link::activity::timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Activity.timelines.unlink() instead.
        "::unlink::activity::timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.timelines.exists() instead.
        "::exists::activity::timelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/timelines/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Activity.timelines() instead.
        "::get::activity::timelines": {
          isArray: true,
          url: urlBase + "/activities/:id/timelines",
          method: "GET"
        },

        // INTERNAL. Use Activity.timelines.create() instead.
        "::create::activity::timelines": {
          url: urlBase + "/activities/:id/timelines",
          method: "POST"
        },

        // INTERNAL. Use Activity.timelines.createMany() instead.
        "::createMany::activity::timelines": {
          isArray: true,
          url: urlBase + "/activities/:id/timelines",
          method: "POST"
        },

        // INTERNAL. Use Activity.timelines.destroyAll() instead.
        "::delete::activity::timelines": {
          url: urlBase + "/activities/:id/timelines",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.timelines.count() instead.
        "::count::activity::timelines": {
          url: urlBase + "/activities/:id/timelines/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Timeline#updateOrCreate
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Timeline#update
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Timeline#destroyById
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Timeline#removeById
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Timeline` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Timeline#modelName
    * @propertyOf lbServices.Timeline
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Timeline`.
    */
    R.modelName = "Timeline";


        /**
         * @ngdoc method
         * @name lbServices.Timeline#page
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::timeline::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Timeline.activities
     * @header lbServices.Timeline.activities
     * @object
     * @description
     *
     * The object `Timeline.activities` groups methods
     * manipulating `Activity` instances related to `Timeline`.
     *
     * Call {@link lbServices.Timeline#activities Timeline.activities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Timeline#activities
         * @methodOf lbServices.Timeline
         *
         * @description
         *
         * Queries activities of timeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#count
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Counts activities of timeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.activities.count = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::count::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#create
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Creates a new instance in activities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.create = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::create::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#createMany
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Creates a new instance in activities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.createMany = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::createMany::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#destroyAll
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Deletes all activities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.activities.destroyAll = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::delete::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#destroyById
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Delete a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.activities.destroyById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::destroyById::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#exists
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Check the existence of activities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.exists = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::exists::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#findById
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Find a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.findById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::findById::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#link
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Add a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.link = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::link::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#unlink
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Remove the activities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.activities.unlink = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::unlink::timeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Timeline.activities#updateById
         * @methodOf lbServices.Timeline.activities
         *
         * @description
         *
         * Update a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.updateById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::updateById::timeline::activities"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Space
 * @header lbServices.Space
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Space` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Space",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/spaces/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Space.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/spaces/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Space.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.comments.destroyById() instead.
        "prototype$__destroyById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.comments.updateById() instead.
        "prototype$__updateById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.spaceEntities.findById() instead.
        "prototype$__findById__spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/spaceEntities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.spaceEntities.destroyById() instead.
        "prototype$__destroyById__spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/spaceEntities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.spaceEntities.updateById() instead.
        "prototype$__updateById__spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/spaceEntities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Space.shares.findById() instead.
        "prototype$__findById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.shares.destroyById() instead.
        "prototype$__destroyById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.shares.updateById() instead.
        "prototype$__updateById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/spaces/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Space.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/spaces/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Space.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/spaces/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Space.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/spaces/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Space.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/spaces/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Space.comments.create() instead.
        "prototype$__create__comments": {
          url: urlBase + "/spaces/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Space.comments.destroyAll() instead.
        "prototype$__delete__comments": {
          url: urlBase + "/spaces/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Space.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/spaces/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Space.spaceEntities() instead.
        "prototype$__get__spaceEntities": {
          isArray: true,
          url: urlBase + "/spaces/:id/spaceEntities",
          method: "GET"
        },

        // INTERNAL. Use Space.spaceEntities.create() instead.
        "prototype$__create__spaceEntities": {
          url: urlBase + "/spaces/:id/spaceEntities",
          method: "POST"
        },

        // INTERNAL. Use Space.spaceEntities.destroyAll() instead.
        "prototype$__delete__spaceEntities": {
          url: urlBase + "/spaces/:id/spaceEntities",
          method: "DELETE"
        },

        // INTERNAL. Use Space.spaceEntities.count() instead.
        "prototype$__count__spaceEntities": {
          url: urlBase + "/spaces/:id/spaceEntities/count",
          method: "GET"
        },

        // INTERNAL. Use Space.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/spaces/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Space.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/spaces/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Space.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/spaces/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Space.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/spaces/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Space.shares() instead.
        "prototype$__get__shares": {
          isArray: true,
          url: urlBase + "/spaces/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Space.shares.create() instead.
        "prototype$__create__shares": {
          url: urlBase + "/spaces/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Space.shares.destroyAll() instead.
        "prototype$__delete__shares": {
          url: urlBase + "/spaces/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Space.shares.count() instead.
        "prototype$__count__shares": {
          url: urlBase + "/spaces/:id/shares/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#create
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/spaces",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#createMany
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/spaces",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#upsert
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/spaces",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#exists
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/spaces/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#findById
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/spaces/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#find
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/spaces",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#findOne
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/spaces/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#updateAll
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/spaces/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#deleteById
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/spaces/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#count
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/spaces/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#prototype$updateAttributes
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/spaces/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Space#createChangeStream
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/spaces/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Page.myspace.findById() instead.
        "::findById::page::myspace": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myspace/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.myspace.destroyById() instead.
        "::destroyById::page::myspace": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myspace/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.myspace.updateById() instead.
        "::updateById::page::myspace": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/myspace/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Page.myspace() instead.
        "::get::page::myspace": {
          isArray: true,
          url: urlBase + "/pages/:id/myspace",
          method: "GET"
        },

        // INTERNAL. Use Page.myspace.create() instead.
        "::create::page::myspace": {
          url: urlBase + "/pages/:id/myspace",
          method: "POST"
        },

        // INTERNAL. Use Page.myspace.createMany() instead.
        "::createMany::page::myspace": {
          isArray: true,
          url: urlBase + "/pages/:id/myspace",
          method: "POST"
        },

        // INTERNAL. Use Page.myspace.destroyAll() instead.
        "::delete::page::myspace": {
          url: urlBase + "/pages/:id/myspace",
          method: "DELETE"
        },

        // INTERNAL. Use Page.myspace.count() instead.
        "::count::page::myspace": {
          url: urlBase + "/pages/:id/myspace/count",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.space() instead.
        "::get::spaceEntity::space": {
          url: urlBase + "/spaceEntities/:id/space",
          method: "GET"
        },

        // INTERNAL. Use Tag.spaces.findById() instead.
        "::findById::tag::spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.spaces.destroyById() instead.
        "::destroyById::tag::spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.spaces.updateById() instead.
        "::updateById::tag::spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.spaces.link() instead.
        "::link::tag::spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.spaces.unlink() instead.
        "::unlink::tag::spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.spaces.exists() instead.
        "::exists::tag::spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.spaces() instead.
        "::get::tag::spaces": {
          isArray: true,
          url: urlBase + "/tags/:id/spaces",
          method: "GET"
        },

        // INTERNAL. Use Tag.spaces.create() instead.
        "::create::tag::spaces": {
          url: urlBase + "/tags/:id/spaces",
          method: "POST"
        },

        // INTERNAL. Use Tag.spaces.createMany() instead.
        "::createMany::tag::spaces": {
          isArray: true,
          url: urlBase + "/tags/:id/spaces",
          method: "POST"
        },

        // INTERNAL. Use Tag.spaces.destroyAll() instead.
        "::delete::tag::spaces": {
          url: urlBase + "/tags/:id/spaces",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.spaces.count() instead.
        "::count::tag::spaces": {
          url: urlBase + "/tags/:id/spaces/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Space#updateOrCreate
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Space#update
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Space#destroyById
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Space#removeById
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Space#modelName
    * @propertyOf lbServices.Space
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Space`.
    */
    R.modelName = "Space";


        /**
         * @ngdoc method
         * @name lbServices.Space#page
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::space::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Space.likes
     * @header lbServices.Space.likes
     * @object
     * @description
     *
     * The object `Space.likes` groups methods
     * manipulating `Like` instances related to `Space`.
     *
     * Call {@link lbServices.Space#likes Space.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Space#likes
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Queries likes of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::space::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.likes#count
         * @methodOf lbServices.Space.likes
         *
         * @description
         *
         * Counts likes of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::space::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.likes#create
         * @methodOf lbServices.Space.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::create::space::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.likes#createMany
         * @methodOf lbServices.Space.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::createMany::space::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.likes#destroyAll
         * @methodOf lbServices.Space.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::delete::space::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.likes#destroyById
         * @methodOf lbServices.Space.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::destroyById::space::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.likes#findById
         * @methodOf lbServices.Space.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::findById::space::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.likes#updateById
         * @methodOf lbServices.Space.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::updateById::space::likes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Space.comments
     * @header lbServices.Space.comments
     * @object
     * @description
     *
     * The object `Space.comments` groups methods
     * manipulating `Comment` instances related to `Space`.
     *
     * Call {@link lbServices.Space#comments Space.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Space#comments
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Queries comments of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::get::space::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.comments#count
         * @methodOf lbServices.Space.comments
         *
         * @description
         *
         * Counts comments of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::count::space::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.comments#create
         * @methodOf lbServices.Space.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.create = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::create::space::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.comments#createMany
         * @methodOf lbServices.Space.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::createMany::space::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.comments#destroyAll
         * @methodOf lbServices.Space.comments
         *
         * @description
         *
         * Deletes all comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::delete::space::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.comments#destroyById
         * @methodOf lbServices.Space.comments
         *
         * @description
         *
         * Delete a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::destroyById::space::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.comments#findById
         * @methodOf lbServices.Space.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::findById::space::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.comments#updateById
         * @methodOf lbServices.Space.comments
         *
         * @description
         *
         * Update a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::updateById::space::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Space.spaceEntities
     * @header lbServices.Space.spaceEntities
     * @object
     * @description
     *
     * The object `Space.spaceEntities` groups methods
     * manipulating `SpaceEntity` instances related to `Space`.
     *
     * Call {@link lbServices.Space#spaceEntities Space.spaceEntities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Space#spaceEntities
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Queries spaceEntities of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::get::space::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.spaceEntities#count
         * @methodOf lbServices.Space.spaceEntities
         *
         * @description
         *
         * Counts spaceEntities of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.spaceEntities.count = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::count::space::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.spaceEntities#create
         * @methodOf lbServices.Space.spaceEntities
         *
         * @description
         *
         * Creates a new instance in spaceEntities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities.create = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::create::space::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.spaceEntities#createMany
         * @methodOf lbServices.Space.spaceEntities
         *
         * @description
         *
         * Creates a new instance in spaceEntities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities.createMany = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::createMany::space::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.spaceEntities#destroyAll
         * @methodOf lbServices.Space.spaceEntities
         *
         * @description
         *
         * Deletes all spaceEntities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntities.destroyAll = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::delete::space::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.spaceEntities#destroyById
         * @methodOf lbServices.Space.spaceEntities
         *
         * @description
         *
         * Delete a related item by id for spaceEntities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntities.destroyById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::destroyById::space::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.spaceEntities#findById
         * @methodOf lbServices.Space.spaceEntities
         *
         * @description
         *
         * Find a related item by id for spaceEntities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities.findById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::findById::space::spaceEntities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.spaceEntities#updateById
         * @methodOf lbServices.Space.spaceEntities
         *
         * @description
         *
         * Update a related item by id for spaceEntities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntities.updateById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::updateById::space::spaceEntities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Space.tags
     * @header lbServices.Space.tags
     * @object
     * @description
     *
     * The object `Space.tags` groups methods
     * manipulating `Tag` instances related to `Space`.
     *
     * Call {@link lbServices.Space#tags Space.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Space#tags
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Queries tags of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#count
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Counts tags of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#create
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#createMany
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#destroyAll
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#destroyById
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#exists
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#findById
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#link
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#unlink
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::space::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.tags#updateById
         * @methodOf lbServices.Space.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::space::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Space.shares
     * @header lbServices.Space.shares
     * @object
     * @description
     *
     * The object `Space.shares` groups methods
     * manipulating `Share` instances related to `Space`.
     *
     * Call {@link lbServices.Space#shares Space.shares()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Space#shares
         * @methodOf lbServices.Space
         *
         * @description
         *
         * Queries shares of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::get::space::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.shares#count
         * @methodOf lbServices.Space.shares
         *
         * @description
         *
         * Counts shares of space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.shares.count = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::count::space::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.shares#create
         * @methodOf lbServices.Space.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.create = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::create::space::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.shares#createMany
         * @methodOf lbServices.Space.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.createMany = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::createMany::space::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.shares#destroyAll
         * @methodOf lbServices.Space.shares
         *
         * @description
         *
         * Deletes all shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyAll = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::delete::space::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.shares#destroyById
         * @methodOf lbServices.Space.shares
         *
         * @description
         *
         * Delete a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::destroyById::space::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.shares#findById
         * @methodOf lbServices.Space.shares
         *
         * @description
         *
         * Find a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.findById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::findById::space::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Space.shares#updateById
         * @methodOf lbServices.Space.shares
         *
         * @description
         *
         * Update a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.updateById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::updateById::space::shares"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.SpaceEntity
 * @header lbServices.SpaceEntity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `SpaceEntity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "SpaceEntity",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/spaceEntities/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use SpaceEntity.product() instead.
        "prototype$__get__product": {
          url: urlBase + "/spaceEntities/:id/product",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.image() instead.
        "prototype$__get__image": {
          url: urlBase + "/spaceEntities/:id/image",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.space() instead.
        "prototype$__get__space": {
          url: urlBase + "/spaceEntities/:id/space",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/spaceEntities/:id/page",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.article() instead.
        "prototype$__get__article": {
          url: urlBase + "/spaceEntities/:id/article",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#prototype$__get__moodboard
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Fetches belongsTo relation moodboard.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "prototype$__get__moodboard": {
          url: urlBase + "/spaceEntities/:id/moodboard",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#create
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/spaceEntities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#createMany
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/spaceEntities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#upsert
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/spaceEntities",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#exists
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/spaceEntities/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#findById
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/spaceEntities/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#find
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/spaceEntities",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#findOne
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/spaceEntities/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#updateAll
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/spaceEntities/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#deleteById
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/spaceEntities/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#count
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/spaceEntities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#prototype$updateAttributes
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/spaceEntities/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#createChangeStream
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/spaceEntities/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Product.spaceEntity.findById() instead.
        "::findById::product::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/spaceEntity/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.spaceEntity.destroyById() instead.
        "::destroyById::product::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/spaceEntity/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.spaceEntity.updateById() instead.
        "::updateById::product::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/spaceEntity/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.spaceEntity() instead.
        "::get::product::spaceEntity": {
          isArray: true,
          url: urlBase + "/products/:id/spaceEntity",
          method: "GET"
        },

        // INTERNAL. Use Product.spaceEntity.create() instead.
        "::create::product::spaceEntity": {
          url: urlBase + "/products/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Product.spaceEntity.createMany() instead.
        "::createMany::product::spaceEntity": {
          isArray: true,
          url: urlBase + "/products/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Product.spaceEntity.destroyAll() instead.
        "::delete::product::spaceEntity": {
          url: urlBase + "/products/:id/spaceEntity",
          method: "DELETE"
        },

        // INTERNAL. Use Product.spaceEntity.count() instead.
        "::count::product::spaceEntity": {
          url: urlBase + "/products/:id/spaceEntity/count",
          method: "GET"
        },

        // INTERNAL. Use Image.spaceEntity.findById() instead.
        "::findById::image::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/spaceEntity/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.spaceEntity.destroyById() instead.
        "::destroyById::image::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/spaceEntity/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.spaceEntity.updateById() instead.
        "::updateById::image::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/spaceEntity/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.spaceEntity() instead.
        "::get::image::spaceEntity": {
          isArray: true,
          url: urlBase + "/images/:id/spaceEntity",
          method: "GET"
        },

        // INTERNAL. Use Image.spaceEntity.create() instead.
        "::create::image::spaceEntity": {
          url: urlBase + "/images/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Image.spaceEntity.createMany() instead.
        "::createMany::image::spaceEntity": {
          isArray: true,
          url: urlBase + "/images/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Image.spaceEntity.destroyAll() instead.
        "::delete::image::spaceEntity": {
          url: urlBase + "/images/:id/spaceEntity",
          method: "DELETE"
        },

        // INTERNAL. Use Image.spaceEntity.count() instead.
        "::count::image::spaceEntity": {
          url: urlBase + "/images/:id/spaceEntity/count",
          method: "GET"
        },

        // INTERNAL. Use Page.spaceEntities.findById() instead.
        "::findById::page::spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/spaceEntities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.spaceEntities.destroyById() instead.
        "::destroyById::page::spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/spaceEntities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.spaceEntities.updateById() instead.
        "::updateById::page::spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/spaceEntities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Page.spaceEntities() instead.
        "::get::page::spaceEntities": {
          isArray: true,
          url: urlBase + "/pages/:id/spaceEntities",
          method: "GET"
        },

        // INTERNAL. Use Page.spaceEntities.create() instead.
        "::create::page::spaceEntities": {
          url: urlBase + "/pages/:id/spaceEntities",
          method: "POST"
        },

        // INTERNAL. Use Page.spaceEntities.createMany() instead.
        "::createMany::page::spaceEntities": {
          isArray: true,
          url: urlBase + "/pages/:id/spaceEntities",
          method: "POST"
        },

        // INTERNAL. Use Page.spaceEntities.destroyAll() instead.
        "::delete::page::spaceEntities": {
          url: urlBase + "/pages/:id/spaceEntities",
          method: "DELETE"
        },

        // INTERNAL. Use Page.spaceEntities.count() instead.
        "::count::page::spaceEntities": {
          url: urlBase + "/pages/:id/spaceEntities/count",
          method: "GET"
        },

        // INTERNAL. Use Space.spaceEntities.findById() instead.
        "::findById::space::spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/spaceEntities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.spaceEntities.destroyById() instead.
        "::destroyById::space::spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/spaceEntities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.spaceEntities.updateById() instead.
        "::updateById::space::spaceEntities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/spaceEntities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.spaceEntities() instead.
        "::get::space::spaceEntities": {
          isArray: true,
          url: urlBase + "/spaces/:id/spaceEntities",
          method: "GET"
        },

        // INTERNAL. Use Space.spaceEntities.create() instead.
        "::create::space::spaceEntities": {
          url: urlBase + "/spaces/:id/spaceEntities",
          method: "POST"
        },

        // INTERNAL. Use Space.spaceEntities.createMany() instead.
        "::createMany::space::spaceEntities": {
          isArray: true,
          url: urlBase + "/spaces/:id/spaceEntities",
          method: "POST"
        },

        // INTERNAL. Use Space.spaceEntities.destroyAll() instead.
        "::delete::space::spaceEntities": {
          url: urlBase + "/spaces/:id/spaceEntities",
          method: "DELETE"
        },

        // INTERNAL. Use Space.spaceEntities.count() instead.
        "::count::space::spaceEntities": {
          url: urlBase + "/spaces/:id/spaceEntities/count",
          method: "GET"
        },

        // INTERNAL. Use Article.spaceEntity.findById() instead.
        "::findById::article::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/spaceEntity/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.spaceEntity.destroyById() instead.
        "::destroyById::article::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/spaceEntity/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.spaceEntity.updateById() instead.
        "::updateById::article::spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/spaceEntity/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.spaceEntity() instead.
        "::get::article::spaceEntity": {
          isArray: true,
          url: urlBase + "/articles/:id/spaceEntity",
          method: "GET"
        },

        // INTERNAL. Use Article.spaceEntity.create() instead.
        "::create::article::spaceEntity": {
          url: urlBase + "/articles/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Article.spaceEntity.createMany() instead.
        "::createMany::article::spaceEntity": {
          isArray: true,
          url: urlBase + "/articles/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Article.spaceEntity.destroyAll() instead.
        "::delete::article::spaceEntity": {
          url: urlBase + "/articles/:id/spaceEntity",
          method: "DELETE"
        },

        // INTERNAL. Use Article.spaceEntity.count() instead.
        "::count::article::spaceEntity": {
          url: urlBase + "/articles/:id/spaceEntity/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#updateOrCreate
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#update
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#destroyById
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#removeById
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.SpaceEntity#modelName
    * @propertyOf lbServices.SpaceEntity
    * @description
    * The name of the model represented by this $resource,
    * i.e. `SpaceEntity`.
    */
    R.modelName = "SpaceEntity";


        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#product
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Fetches belongsTo relation product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::spaceEntity::product"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#image
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Fetches belongsTo relation image.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.image = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::get::spaceEntity::image"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#space
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Fetches belongsTo relation space.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.space = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::get::spaceEntity::space"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#page
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::spaceEntity::page"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.SpaceEntity#article
         * @methodOf lbServices.SpaceEntity
         *
         * @description
         *
         * Fetches belongsTo relation article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R.article = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::get::spaceEntity::article"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Article
 * @header lbServices.Article
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Article` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Article",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/articles/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Article#prototype$__get__feed
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Fetches hasOne relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/articles/:id/feed",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#prototype$__create__feed
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Creates a new instance in feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "prototype$__create__feed": {
          url: urlBase + "/articles/:id/feed",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#prototype$__update__feed
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Update feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "prototype$__update__feed": {
          url: urlBase + "/articles/:id/feed",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#prototype$__destroy__feed
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Deletes feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__feed": {
          url: urlBase + "/articles/:id/feed",
          method: "DELETE"
        },

        // INTERNAL. Use Article.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.comments.destroyById() instead.
        "prototype$__destroyById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.comments.updateById() instead.
        "prototype$__updateById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.spaceEntity.findById() instead.
        "prototype$__findById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/spaceEntity/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.spaceEntity.destroyById() instead.
        "prototype$__destroyById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/spaceEntity/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.spaceEntity.updateById() instead.
        "prototype$__updateById__spaceEntity": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/spaceEntity/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/articles/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Article.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Article.shares.findById() instead.
        "prototype$__findById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.shares.destroyById() instead.
        "prototype$__destroyById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.shares.updateById() instead.
        "prototype$__updateById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/articles/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Article.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/articles/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Article.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/articles/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Article.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/articles/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Article.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/articles/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Article.comments.create() instead.
        "prototype$__create__comments": {
          url: urlBase + "/articles/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Article.comments.destroyAll() instead.
        "prototype$__delete__comments": {
          url: urlBase + "/articles/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Article.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/articles/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Article.spaceEntity() instead.
        "prototype$__get__spaceEntity": {
          isArray: true,
          url: urlBase + "/articles/:id/spaceEntity",
          method: "GET"
        },

        // INTERNAL. Use Article.spaceEntity.create() instead.
        "prototype$__create__spaceEntity": {
          url: urlBase + "/articles/:id/spaceEntity",
          method: "POST"
        },

        // INTERNAL. Use Article.spaceEntity.destroyAll() instead.
        "prototype$__delete__spaceEntity": {
          url: urlBase + "/articles/:id/spaceEntity",
          method: "DELETE"
        },

        // INTERNAL. Use Article.spaceEntity.count() instead.
        "prototype$__count__spaceEntity": {
          url: urlBase + "/articles/:id/spaceEntity/count",
          method: "GET"
        },

        // INTERNAL. Use Article.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/articles/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Article.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/articles/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Article.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/articles/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Article.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/articles/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Article.shares() instead.
        "prototype$__get__shares": {
          isArray: true,
          url: urlBase + "/articles/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Article.shares.create() instead.
        "prototype$__create__shares": {
          url: urlBase + "/articles/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Article.shares.destroyAll() instead.
        "prototype$__delete__shares": {
          url: urlBase + "/articles/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Article.shares.count() instead.
        "prototype$__count__shares": {
          url: urlBase + "/articles/:id/shares/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#create
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "create": {
          isArray: true,
          url: urlBase + "/articles",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#createMany
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/articles",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#upsert
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/articles",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#exists
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/articles/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#findById
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/articles/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#find
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/articles",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#findOne
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/articles/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#updateAll
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/articles/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#deleteById
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/articles/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#count
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/articles/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#prototype$updateAttributes
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/articles/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#createChangeStream
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/articles/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Article#prototype$similarProducts
         * @methodOf lbServices.Article
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        "prototype$similarProducts": {
          isArray: true,
          url: urlBase + "/articles/:id/similarProducts",
          method: "GET"
        },

        // INTERNAL. Use SpaceEntity.article() instead.
        "::get::spaceEntity::article": {
          url: urlBase + "/spaceEntities/:id/article",
          method: "GET"
        },

        // INTERNAL. Use Tag.articles.findById() instead.
        "::findById::tag::articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.articles.destroyById() instead.
        "::destroyById::tag::articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.articles.updateById() instead.
        "::updateById::tag::articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.articles.link() instead.
        "::link::tag::articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.articles.unlink() instead.
        "::unlink::tag::articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.articles.exists() instead.
        "::exists::tag::articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.articles() instead.
        "::get::tag::articles": {
          isArray: true,
          url: urlBase + "/tags/:id/articles",
          method: "GET"
        },

        // INTERNAL. Use Tag.articles.create() instead.
        "::create::tag::articles": {
          url: urlBase + "/tags/:id/articles",
          method: "POST"
        },

        // INTERNAL. Use Tag.articles.createMany() instead.
        "::createMany::tag::articles": {
          isArray: true,
          url: urlBase + "/tags/:id/articles",
          method: "POST"
        },

        // INTERNAL. Use Tag.articles.destroyAll() instead.
        "::delete::tag::articles": {
          url: urlBase + "/tags/:id/articles",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.articles.count() instead.
        "::count::tag::articles": {
          url: urlBase + "/tags/:id/articles/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Article#updateOrCreate
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Article#update
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Article#destroyById
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Article#removeById
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Article#modelName
    * @propertyOf lbServices.Article
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Article`.
    */
    R.modelName = "Article";

    /**
     * @ngdoc object
     * @name lbServices.Article.likes
     * @header lbServices.Article.likes
     * @object
     * @description
     *
     * The object `Article.likes` groups methods
     * manipulating `Like` instances related to `Article`.
     *
     * Call {@link lbServices.Article#likes Article.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Article#likes
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Queries likes of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::article::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.likes#count
         * @methodOf lbServices.Article.likes
         *
         * @description
         *
         * Counts likes of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::article::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.likes#create
         * @methodOf lbServices.Article.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::create::article::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.likes#createMany
         * @methodOf lbServices.Article.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::createMany::article::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.likes#destroyAll
         * @methodOf lbServices.Article.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::delete::article::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.likes#destroyById
         * @methodOf lbServices.Article.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::destroyById::article::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.likes#findById
         * @methodOf lbServices.Article.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::findById::article::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.likes#updateById
         * @methodOf lbServices.Article.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::updateById::article::likes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Article.comments
     * @header lbServices.Article.comments
     * @object
     * @description
     *
     * The object `Article.comments` groups methods
     * manipulating `Comment` instances related to `Article`.
     *
     * Call {@link lbServices.Article#comments Article.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Article#comments
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Queries comments of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::get::article::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.comments#count
         * @methodOf lbServices.Article.comments
         *
         * @description
         *
         * Counts comments of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::count::article::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.comments#create
         * @methodOf lbServices.Article.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.create = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::create::article::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.comments#createMany
         * @methodOf lbServices.Article.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::createMany::article::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.comments#destroyAll
         * @methodOf lbServices.Article.comments
         *
         * @description
         *
         * Deletes all comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::delete::article::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.comments#destroyById
         * @methodOf lbServices.Article.comments
         *
         * @description
         *
         * Delete a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::destroyById::article::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.comments#findById
         * @methodOf lbServices.Article.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::findById::article::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.comments#updateById
         * @methodOf lbServices.Article.comments
         *
         * @description
         *
         * Update a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::updateById::article::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Article.spaceEntity
     * @header lbServices.Article.spaceEntity
     * @object
     * @description
     *
     * The object `Article.spaceEntity` groups methods
     * manipulating `SpaceEntity` instances related to `Article`.
     *
     * Call {@link lbServices.Article#spaceEntity Article.spaceEntity()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Article#spaceEntity
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Queries spaceEntity of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::get::article::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.spaceEntity#count
         * @methodOf lbServices.Article.spaceEntity
         *
         * @description
         *
         * Counts spaceEntity of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.spaceEntity.count = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::count::article::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.spaceEntity#create
         * @methodOf lbServices.Article.spaceEntity
         *
         * @description
         *
         * Creates a new instance in spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.create = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::create::article::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.spaceEntity#createMany
         * @methodOf lbServices.Article.spaceEntity
         *
         * @description
         *
         * Creates a new instance in spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.createMany = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::createMany::article::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.spaceEntity#destroyAll
         * @methodOf lbServices.Article.spaceEntity
         *
         * @description
         *
         * Deletes all spaceEntity of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntity.destroyAll = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::delete::article::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.spaceEntity#destroyById
         * @methodOf lbServices.Article.spaceEntity
         *
         * @description
         *
         * Delete a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaceEntity.destroyById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::destroyById::article::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.spaceEntity#findById
         * @methodOf lbServices.Article.spaceEntity
         *
         * @description
         *
         * Find a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.findById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::findById::article::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.spaceEntity#updateById
         * @methodOf lbServices.Article.spaceEntity
         *
         * @description
         *
         * Update a related item by id for spaceEntity.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaceEntity
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `SpaceEntity` object.)
         * </em>
         */
        R.spaceEntity.updateById = function() {
          var TargetResource = $injector.get("SpaceEntity");
          var action = TargetResource["::updateById::article::spaceEntity"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article#page
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::article::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Article.tags
     * @header lbServices.Article.tags
     * @object
     * @description
     *
     * The object `Article.tags` groups methods
     * manipulating `Tag` instances related to `Article`.
     *
     * Call {@link lbServices.Article#tags Article.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Article#tags
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Queries tags of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#count
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Counts tags of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#create
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#createMany
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#destroyAll
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#destroyById
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#exists
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#findById
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#link
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#unlink
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::article::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.tags#updateById
         * @methodOf lbServices.Article.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::article::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Article.shares
     * @header lbServices.Article.shares
     * @object
     * @description
     *
     * The object `Article.shares` groups methods
     * manipulating `Share` instances related to `Article`.
     *
     * Call {@link lbServices.Article#shares Article.shares()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Article#shares
         * @methodOf lbServices.Article
         *
         * @description
         *
         * Queries shares of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::get::article::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.shares#count
         * @methodOf lbServices.Article.shares
         *
         * @description
         *
         * Counts shares of article.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.shares.count = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::count::article::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.shares#create
         * @methodOf lbServices.Article.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.create = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::create::article::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.shares#createMany
         * @methodOf lbServices.Article.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.createMany = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::createMany::article::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.shares#destroyAll
         * @methodOf lbServices.Article.shares
         *
         * @description
         *
         * Deletes all shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyAll = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::delete::article::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.shares#destroyById
         * @methodOf lbServices.Article.shares
         *
         * @description
         *
         * Delete a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::destroyById::article::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.shares#findById
         * @methodOf lbServices.Article.shares
         *
         * @description
         *
         * Find a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.findById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::findById::article::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Article.shares#updateById
         * @methodOf lbServices.Article.shares
         *
         * @description
         *
         * Update a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.updateById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::updateById::article::shares"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Discussion
 * @header lbServices.Discussion
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Discussion` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Discussion",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/discussions/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Discussion.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/discussions/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#prototype$__get__feed
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Fetches hasOne relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/discussions/:id/feed",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#prototype$__create__feed
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Creates a new instance in feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "prototype$__create__feed": {
          url: urlBase + "/discussions/:id/feed",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#prototype$__update__feed
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Update feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "prototype$__update__feed": {
          url: urlBase + "/discussions/:id/feed",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#prototype$__destroy__feed
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Deletes feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__feed": {
          url: urlBase + "/discussions/:id/feed",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Discussion.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Discussion.comments.destroyById() instead.
        "prototype$__destroyById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.comments.updateById() instead.
        "prototype$__updateById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Discussion.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Discussion.shares.findById() instead.
        "prototype$__findById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Discussion.shares.destroyById() instead.
        "prototype$__destroyById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.shares.updateById() instead.
        "prototype$__updateById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/discussions/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Discussion.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/discussions/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Discussion.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/discussions/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/discussions/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Discussion.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/discussions/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Discussion.comments.create() instead.
        "prototype$__create__comments": {
          url: urlBase + "/discussions/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Discussion.comments.destroyAll() instead.
        "prototype$__delete__comments": {
          url: urlBase + "/discussions/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/discussions/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Discussion.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/discussions/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Discussion.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/discussions/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Discussion.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/discussions/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/discussions/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Discussion.shares() instead.
        "prototype$__get__shares": {
          isArray: true,
          url: urlBase + "/discussions/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Discussion.shares.create() instead.
        "prototype$__create__shares": {
          url: urlBase + "/discussions/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Discussion.shares.destroyAll() instead.
        "prototype$__delete__shares": {
          url: urlBase + "/discussions/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.shares.count() instead.
        "prototype$__count__shares": {
          url: urlBase + "/discussions/:id/shares/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#create
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/discussions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#createMany
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/discussions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#upsert
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/discussions",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#exists
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/discussions/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#findById
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/discussions/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#find
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/discussions",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#findOne
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/discussions/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#updateAll
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/discussions/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#deleteById
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/discussions/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#count
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/discussions/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#prototype$updateAttributes
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/discussions/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Discussion#createChangeStream
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/discussions/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Tag.discussions.findById() instead.
        "::findById::tag::discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.discussions.destroyById() instead.
        "::destroyById::tag::discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.discussions.updateById() instead.
        "::updateById::tag::discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.discussions.link() instead.
        "::link::tag::discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.discussions.unlink() instead.
        "::unlink::tag::discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.discussions.exists() instead.
        "::exists::tag::discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.discussions() instead.
        "::get::tag::discussions": {
          isArray: true,
          url: urlBase + "/tags/:id/discussions",
          method: "GET"
        },

        // INTERNAL. Use Tag.discussions.create() instead.
        "::create::tag::discussions": {
          url: urlBase + "/tags/:id/discussions",
          method: "POST"
        },

        // INTERNAL. Use Tag.discussions.createMany() instead.
        "::createMany::tag::discussions": {
          isArray: true,
          url: urlBase + "/tags/:id/discussions",
          method: "POST"
        },

        // INTERNAL. Use Tag.discussions.destroyAll() instead.
        "::delete::tag::discussions": {
          url: urlBase + "/tags/:id/discussions",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.discussions.count() instead.
        "::count::tag::discussions": {
          url: urlBase + "/tags/:id/discussions/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Discussion#updateOrCreate
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Discussion#update
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Discussion#destroyById
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Discussion#removeById
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Discussion#modelName
    * @propertyOf lbServices.Discussion
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Discussion`.
    */
    R.modelName = "Discussion";


        /**
         * @ngdoc method
         * @name lbServices.Discussion#page
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::discussion::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Discussion.likes
     * @header lbServices.Discussion.likes
     * @object
     * @description
     *
     * The object `Discussion.likes` groups methods
     * manipulating `Like` instances related to `Discussion`.
     *
     * Call {@link lbServices.Discussion#likes Discussion.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Discussion#likes
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Queries likes of discussion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::discussion::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.likes#count
         * @methodOf lbServices.Discussion.likes
         *
         * @description
         *
         * Counts likes of discussion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::discussion::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.likes#create
         * @methodOf lbServices.Discussion.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::create::discussion::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.likes#createMany
         * @methodOf lbServices.Discussion.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::createMany::discussion::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.likes#destroyAll
         * @methodOf lbServices.Discussion.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::delete::discussion::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.likes#destroyById
         * @methodOf lbServices.Discussion.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::destroyById::discussion::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.likes#findById
         * @methodOf lbServices.Discussion.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::findById::discussion::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.likes#updateById
         * @methodOf lbServices.Discussion.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::updateById::discussion::likes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Discussion.comments
     * @header lbServices.Discussion.comments
     * @object
     * @description
     *
     * The object `Discussion.comments` groups methods
     * manipulating `Comment` instances related to `Discussion`.
     *
     * Call {@link lbServices.Discussion#comments Discussion.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Discussion#comments
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Queries comments of discussion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::get::discussion::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.comments#count
         * @methodOf lbServices.Discussion.comments
         *
         * @description
         *
         * Counts comments of discussion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::count::discussion::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.comments#create
         * @methodOf lbServices.Discussion.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.create = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::create::discussion::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.comments#createMany
         * @methodOf lbServices.Discussion.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::createMany::discussion::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.comments#destroyAll
         * @methodOf lbServices.Discussion.comments
         *
         * @description
         *
         * Deletes all comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::delete::discussion::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.comments#destroyById
         * @methodOf lbServices.Discussion.comments
         *
         * @description
         *
         * Delete a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::destroyById::discussion::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.comments#findById
         * @methodOf lbServices.Discussion.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::findById::discussion::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.comments#updateById
         * @methodOf lbServices.Discussion.comments
         *
         * @description
         *
         * Update a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::updateById::discussion::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Discussion.tags
     * @header lbServices.Discussion.tags
     * @object
     * @description
     *
     * The object `Discussion.tags` groups methods
     * manipulating `Tag` instances related to `Discussion`.
     *
     * Call {@link lbServices.Discussion#tags Discussion.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Discussion#tags
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Queries tags of discussion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#count
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Counts tags of discussion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#create
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#createMany
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#destroyAll
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#destroyById
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#exists
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#findById
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#link
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#unlink
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::discussion::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.tags#updateById
         * @methodOf lbServices.Discussion.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::discussion::tags"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Discussion.shares
     * @header lbServices.Discussion.shares
     * @object
     * @description
     *
     * The object `Discussion.shares` groups methods
     * manipulating `Share` instances related to `Discussion`.
     *
     * Call {@link lbServices.Discussion#shares Discussion.shares()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Discussion#shares
         * @methodOf lbServices.Discussion
         *
         * @description
         *
         * Queries shares of discussion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::get::discussion::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.shares#count
         * @methodOf lbServices.Discussion.shares
         *
         * @description
         *
         * Counts shares of discussion.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.shares.count = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::count::discussion::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.shares#create
         * @methodOf lbServices.Discussion.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.create = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::create::discussion::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.shares#createMany
         * @methodOf lbServices.Discussion.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.createMany = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::createMany::discussion::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.shares#destroyAll
         * @methodOf lbServices.Discussion.shares
         *
         * @description
         *
         * Deletes all shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyAll = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::delete::discussion::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.shares#destroyById
         * @methodOf lbServices.Discussion.shares
         *
         * @description
         *
         * Delete a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::destroyById::discussion::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.shares#findById
         * @methodOf lbServices.Discussion.shares
         *
         * @description
         *
         * Find a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.findById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::findById::discussion::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Discussion.shares#updateById
         * @methodOf lbServices.Discussion.shares
         *
         * @description
         *
         * Update a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.updateById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::updateById::discussion::shares"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Project
 * @header lbServices.Project
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Project` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Project",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/projects/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Project.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/projects/:id/page",
          method: "GET"
        },

        // INTERNAL. Use Project.images.findById() instead.
        "prototype$__findById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/images/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.images.destroyById() instead.
        "prototype$__destroyById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/images/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.images.updateById() instead.
        "prototype$__updateById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/images/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#prototype$__get__feed
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Fetches hasOne relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/projects/:id/feed",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#prototype$__create__feed
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Creates a new instance in feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "prototype$__create__feed": {
          url: urlBase + "/projects/:id/feed",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#prototype$__update__feed
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Update feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "prototype$__update__feed": {
          url: urlBase + "/projects/:id/feed",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#prototype$__destroy__feed
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Deletes feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__feed": {
          url: urlBase + "/projects/:id/feed",
          method: "DELETE"
        },

        // INTERNAL. Use Project.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.comments.destroyById() instead.
        "prototype$__destroyById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.comments.updateById() instead.
        "prototype$__updateById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.shares.findById() instead.
        "prototype$__findById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.shares.destroyById() instead.
        "prototype$__destroyById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.shares.updateById() instead.
        "prototype$__updateById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Project.images() instead.
        "prototype$__get__images": {
          isArray: true,
          url: urlBase + "/projects/:id/images",
          method: "GET"
        },

        // INTERNAL. Use Project.images.create() instead.
        "prototype$__create__images": {
          url: urlBase + "/projects/:id/images",
          method: "POST"
        },

        // INTERNAL. Use Project.images.destroyAll() instead.
        "prototype$__delete__images": {
          url: urlBase + "/projects/:id/images",
          method: "DELETE"
        },

        // INTERNAL. Use Project.images.count() instead.
        "prototype$__count__images": {
          url: urlBase + "/projects/:id/images/count",
          method: "GET"
        },

        // INTERNAL. Use Project.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/projects/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Project.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/projects/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Project.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/projects/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Project.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/projects/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Project.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/projects/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Project.comments.create() instead.
        "prototype$__create__comments": {
          url: urlBase + "/projects/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Project.comments.destroyAll() instead.
        "prototype$__delete__comments": {
          url: urlBase + "/projects/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Project.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/projects/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Project.shares() instead.
        "prototype$__get__shares": {
          isArray: true,
          url: urlBase + "/projects/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Project.shares.create() instead.
        "prototype$__create__shares": {
          url: urlBase + "/projects/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Project.shares.destroyAll() instead.
        "prototype$__delete__shares": {
          url: urlBase + "/projects/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Project.shares.count() instead.
        "prototype$__count__shares": {
          url: urlBase + "/projects/:id/shares/count",
          method: "GET"
        },

        // INTERNAL. Use Project.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/projects/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Project.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/projects/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Project.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/projects/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Project.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/projects/:id/tags/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#create
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/projects",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#createMany
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/projects",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#upsert
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/projects",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#exists
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/projects/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#findById
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/projects/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#find
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/projects",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#findOne
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/projects/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#updateAll
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/projects/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#deleteById
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/projects/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#count
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/projects/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#prototype$updateAttributes
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/projects/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Project#createChangeStream
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/projects/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Image.project() instead.
        "::get::image::project": {
          url: urlBase + "/images/:id/project",
          method: "GET"
        },

        // INTERNAL. Use Page.projects.findById() instead.
        "::findById::page::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/projects/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.projects.destroyById() instead.
        "::destroyById::page::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/projects/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.projects.updateById() instead.
        "::updateById::page::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/projects/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Page.projects() instead.
        "::get::page::projects": {
          isArray: true,
          url: urlBase + "/pages/:id/projects",
          method: "GET"
        },

        // INTERNAL. Use Page.projects.create() instead.
        "::create::page::projects": {
          url: urlBase + "/pages/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use Page.projects.createMany() instead.
        "::createMany::page::projects": {
          isArray: true,
          url: urlBase + "/pages/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use Page.projects.destroyAll() instead.
        "::delete::page::projects": {
          url: urlBase + "/pages/:id/projects",
          method: "DELETE"
        },

        // INTERNAL. Use Page.projects.count() instead.
        "::count::page::projects": {
          url: urlBase + "/pages/:id/projects/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.projects.findById() instead.
        "::findById::tag::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.projects.destroyById() instead.
        "::destroyById::tag::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.projects.updateById() instead.
        "::updateById::tag::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.projects.link() instead.
        "::link::tag::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.projects.unlink() instead.
        "::unlink::tag::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.projects.exists() instead.
        "::exists::tag::projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.projects() instead.
        "::get::tag::projects": {
          isArray: true,
          url: urlBase + "/tags/:id/projects",
          method: "GET"
        },

        // INTERNAL. Use Tag.projects.create() instead.
        "::create::tag::projects": {
          url: urlBase + "/tags/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use Tag.projects.createMany() instead.
        "::createMany::tag::projects": {
          isArray: true,
          url: urlBase + "/tags/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use Tag.projects.destroyAll() instead.
        "::delete::tag::projects": {
          url: urlBase + "/tags/:id/projects",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.projects.count() instead.
        "::count::tag::projects": {
          url: urlBase + "/tags/:id/projects/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Project#updateOrCreate
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Project#update
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Project#destroyById
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Project#removeById
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Project#modelName
    * @propertyOf lbServices.Project
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Project`.
    */
    R.modelName = "Project";


        /**
         * @ngdoc method
         * @name lbServices.Project#page
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::project::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Project.images
     * @header lbServices.Project.images
     * @object
     * @description
     *
     * The object `Project.images` groups methods
     * manipulating `Image` instances related to `Project`.
     *
     * Call {@link lbServices.Project#images Project.images()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Project#images
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Queries images of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::get::project::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.images#count
         * @methodOf lbServices.Project.images
         *
         * @description
         *
         * Counts images of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.images.count = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::count::project::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.images#create
         * @methodOf lbServices.Project.images
         *
         * @description
         *
         * Creates a new instance in images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.create = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::create::project::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.images#createMany
         * @methodOf lbServices.Project.images
         *
         * @description
         *
         * Creates a new instance in images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.createMany = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::createMany::project::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.images#destroyAll
         * @methodOf lbServices.Project.images
         *
         * @description
         *
         * Deletes all images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.destroyAll = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::delete::project::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.images#destroyById
         * @methodOf lbServices.Project.images
         *
         * @description
         *
         * Delete a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.destroyById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::destroyById::project::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.images#findById
         * @methodOf lbServices.Project.images
         *
         * @description
         *
         * Find a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.findById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::findById::project::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.images#updateById
         * @methodOf lbServices.Project.images
         *
         * @description
         *
         * Update a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.updateById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::updateById::project::images"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Project.likes
     * @header lbServices.Project.likes
     * @object
     * @description
     *
     * The object `Project.likes` groups methods
     * manipulating `Like` instances related to `Project`.
     *
     * Call {@link lbServices.Project#likes Project.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Project#likes
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Queries likes of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::project::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.likes#count
         * @methodOf lbServices.Project.likes
         *
         * @description
         *
         * Counts likes of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::project::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.likes#create
         * @methodOf lbServices.Project.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::create::project::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.likes#createMany
         * @methodOf lbServices.Project.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::createMany::project::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.likes#destroyAll
         * @methodOf lbServices.Project.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::delete::project::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.likes#destroyById
         * @methodOf lbServices.Project.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::destroyById::project::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.likes#findById
         * @methodOf lbServices.Project.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::findById::project::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.likes#updateById
         * @methodOf lbServices.Project.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::updateById::project::likes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Project.comments
     * @header lbServices.Project.comments
     * @object
     * @description
     *
     * The object `Project.comments` groups methods
     * manipulating `Comment` instances related to `Project`.
     *
     * Call {@link lbServices.Project#comments Project.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Project#comments
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Queries comments of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::get::project::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.comments#count
         * @methodOf lbServices.Project.comments
         *
         * @description
         *
         * Counts comments of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::count::project::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.comments#create
         * @methodOf lbServices.Project.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.create = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::create::project::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.comments#createMany
         * @methodOf lbServices.Project.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::createMany::project::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.comments#destroyAll
         * @methodOf lbServices.Project.comments
         *
         * @description
         *
         * Deletes all comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::delete::project::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.comments#destroyById
         * @methodOf lbServices.Project.comments
         *
         * @description
         *
         * Delete a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::destroyById::project::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.comments#findById
         * @methodOf lbServices.Project.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::findById::project::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.comments#updateById
         * @methodOf lbServices.Project.comments
         *
         * @description
         *
         * Update a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::updateById::project::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Project.shares
     * @header lbServices.Project.shares
     * @object
     * @description
     *
     * The object `Project.shares` groups methods
     * manipulating `Share` instances related to `Project`.
     *
     * Call {@link lbServices.Project#shares Project.shares()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Project#shares
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Queries shares of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::get::project::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.shares#count
         * @methodOf lbServices.Project.shares
         *
         * @description
         *
         * Counts shares of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.shares.count = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::count::project::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.shares#create
         * @methodOf lbServices.Project.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.create = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::create::project::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.shares#createMany
         * @methodOf lbServices.Project.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.createMany = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::createMany::project::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.shares#destroyAll
         * @methodOf lbServices.Project.shares
         *
         * @description
         *
         * Deletes all shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyAll = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::delete::project::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.shares#destroyById
         * @methodOf lbServices.Project.shares
         *
         * @description
         *
         * Delete a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::destroyById::project::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.shares#findById
         * @methodOf lbServices.Project.shares
         *
         * @description
         *
         * Find a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.findById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::findById::project::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.shares#updateById
         * @methodOf lbServices.Project.shares
         *
         * @description
         *
         * Update a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.updateById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::updateById::project::shares"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Project.tags
     * @header lbServices.Project.tags
     * @object
     * @description
     *
     * The object `Project.tags` groups methods
     * manipulating `Tag` instances related to `Project`.
     *
     * Call {@link lbServices.Project#tags Project.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Project#tags
         * @methodOf lbServices.Project
         *
         * @description
         *
         * Queries tags of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#count
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Counts tags of project.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#create
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#createMany
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#destroyAll
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#destroyById
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#exists
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#findById
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#link
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#unlink
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::project::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Project.tags#updateById
         * @methodOf lbServices.Project.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::project::tags"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Myimage
 * @header lbServices.Myimage
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Myimage` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Myimage",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/myimages/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Myimage#create
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/myimages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#createMany
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/myimages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#upsert
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/myimages",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#exists
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/myimages/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#findById
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/myimages/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#find
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/myimages",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#findOne
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/myimages/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#updateAll
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/myimages/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#deleteById
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/myimages/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#count
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/myimages/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#prototype$updateAttributes
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/myimages/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#createChangeStream
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/myimages/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#upload
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Uploads a file
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `options` – `{object=}` -
         *
         * @param {Object} postData Request data.
         *
         *  - `ctx` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "upload": {
          url: urlBase + "/myimages/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#paint
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Uploads a paint file
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `options` – `{object=}` -
         *
         * @param {Object} postData Request data.
         *
         *  - `ctx` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "paint": {
          url: urlBase + "/myimages/paint",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Myimage#visualsearch
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Uploads a visualsearch file
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        "visualsearch": {
          url: urlBase + "/myimages/visualsearch",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Myimage#updateOrCreate
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Myimage#update
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Myimage#destroyById
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Myimage#removeById
         * @methodOf lbServices.Myimage
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Myimage` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Myimage#modelName
    * @propertyOf lbServices.Myimage
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Myimage`.
    */
    R.modelName = "Myimage";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Review
 * @header lbServices.Review
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Review` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Review",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/reviews/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Review.reviewee() instead.
        "prototype$__get__reviewee": {
          url: urlBase + "/reviews/:id/reviewee",
          method: "GET"
        },

        // INTERNAL. Use Review.reviewer() instead.
        "prototype$__get__reviewer": {
          url: urlBase + "/reviews/:id/reviewer",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#create
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/reviews",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#createMany
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/reviews",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#upsert
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/reviews",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#exists
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/reviews/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#findById
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/reviews/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#find
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/reviews",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#findOne
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/reviews/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#updateAll
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/reviews/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#deleteById
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/reviews/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#count
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/reviews/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#prototype$updateAttributes
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/reviews/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Review#createChangeStream
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/reviews/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Page.reviews.findById() instead.
        "::findById::page::reviews": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/reviews/:fk",
          method: "GET"
        },

        // INTERNAL. Use Page.reviews.destroyById() instead.
        "::destroyById::page::reviews": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/reviews/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Page.reviews.updateById() instead.
        "::updateById::page::reviews": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/pages/:id/reviews/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Page.reviews() instead.
        "::get::page::reviews": {
          isArray: true,
          url: urlBase + "/pages/:id/reviews",
          method: "GET"
        },

        // INTERNAL. Use Page.reviews.create() instead.
        "::create::page::reviews": {
          url: urlBase + "/pages/:id/reviews",
          method: "POST"
        },

        // INTERNAL. Use Page.reviews.createMany() instead.
        "::createMany::page::reviews": {
          isArray: true,
          url: urlBase + "/pages/:id/reviews",
          method: "POST"
        },

        // INTERNAL. Use Page.reviews.destroyAll() instead.
        "::delete::page::reviews": {
          url: urlBase + "/pages/:id/reviews",
          method: "DELETE"
        },

        // INTERNAL. Use Page.reviews.count() instead.
        "::count::page::reviews": {
          url: urlBase + "/pages/:id/reviews/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Review#updateOrCreate
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Review#update
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Review#destroyById
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Review#removeById
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Review` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Review#modelName
    * @propertyOf lbServices.Review
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Review`.
    */
    R.modelName = "Review";


        /**
         * @ngdoc method
         * @name lbServices.Review#reviewee
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Fetches belongsTo relation reviewee.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.reviewee = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::review::reviewee"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Review#reviewer
         * @methodOf lbServices.Review
         *
         * @description
         *
         * Fetches belongsTo relation reviewer.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.reviewer = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::review::reviewer"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Tag
 * @header lbServices.Tag
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tag` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Tag",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/tags/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__findById__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Find a related item by id for tagfollowees.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowees
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__findById__tagfollowees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/tagfollowees/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__destroyById__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Delete a related item by id for tagfollowees.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowees
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__tagfollowees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/tagfollowees/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__updateById__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Update a related item by id for tagfollowees.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowees
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__updateById__tagfollowees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/tagfollowees/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__link__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Add a related item by id for tagfollowees.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowees
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__link__tagfollowees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/tagfollowees/rel/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__unlink__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Remove the tagfollowees relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowees
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__unlink__tagfollowees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/tagfollowees/rel/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__exists__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Check the existence of tagfollowees relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tagfollowees
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__exists__tagfollowees": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/tagfollowees/rel/:fk",
          method: "HEAD"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__findById__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Find a related item by id for timeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timeline
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__findById__timeline": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/timeline/:fk",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__destroyById__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Delete a related item by id for timeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timeline
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroyById__timeline": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/timeline/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__updateById__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Update a related item by id for timeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timeline
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__updateById__timeline": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/timeline/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__link__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Add a related item by id for timeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timeline
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__link__timeline": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/timeline/rel/:fk",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__unlink__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Remove the timeline relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timeline
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__unlink__timeline": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/timeline/rel/:fk",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__exists__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Check the existence of timeline relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for timeline
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__exists__timeline": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/timeline/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.articles.findById() instead.
        "prototype$__findById__articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.articles.destroyById() instead.
        "prototype$__destroyById__articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.articles.updateById() instead.
        "prototype$__updateById__articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.articles.link() instead.
        "prototype$__link__articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.articles.unlink() instead.
        "prototype$__unlink__articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.articles.exists() instead.
        "prototype$__exists__articles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/articles/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.images.findById() instead.
        "prototype$__findById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.images.destroyById() instead.
        "prototype$__destroyById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.images.updateById() instead.
        "prototype$__updateById__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.images.link() instead.
        "prototype$__link__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.images.unlink() instead.
        "prototype$__unlink__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.images.exists() instead.
        "prototype$__exists__images": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/images/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.discussions.findById() instead.
        "prototype$__findById__discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.discussions.destroyById() instead.
        "prototype$__destroyById__discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.discussions.updateById() instead.
        "prototype$__updateById__discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.discussions.link() instead.
        "prototype$__link__discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.discussions.unlink() instead.
        "prototype$__unlink__discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.discussions.exists() instead.
        "prototype$__exists__discussions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/discussions/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.spaces.findById() instead.
        "prototype$__findById__spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.spaces.destroyById() instead.
        "prototype$__destroyById__spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.spaces.updateById() instead.
        "prototype$__updateById__spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.spaces.link() instead.
        "prototype$__link__spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.spaces.unlink() instead.
        "prototype$__unlink__spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.spaces.exists() instead.
        "prototype$__exists__spaces": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/spaces/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.products.findById() instead.
        "prototype$__findById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.products.destroyById() instead.
        "prototype$__destroyById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.products.updateById() instead.
        "prototype$__updateById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.products.link() instead.
        "prototype$__link__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.products.unlink() instead.
        "prototype$__unlink__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.products.exists() instead.
        "prototype$__exists__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/products/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.posts.findById() instead.
        "prototype$__findById__posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.posts.destroyById() instead.
        "prototype$__destroyById__posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.posts.updateById() instead.
        "prototype$__updateById__posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.posts.link() instead.
        "prototype$__link__posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.posts.unlink() instead.
        "prototype$__unlink__posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.posts.exists() instead.
        "prototype$__exists__posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.projects.findById() instead.
        "prototype$__findById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.projects.destroyById() instead.
        "prototype$__destroyById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.projects.updateById() instead.
        "prototype$__updateById__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.projects.link() instead.
        "prototype$__link__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.projects.unlink() instead.
        "prototype$__unlink__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.projects.exists() instead.
        "prototype$__exists__projects": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/projects/rel/:fk",
          method: "HEAD"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__get__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries tagfollowees of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__get__tagfollowees": {
          isArray: true,
          url: urlBase + "/tags/:id/tagfollowees",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__create__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Creates a new instance in tagfollowees of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__create__tagfollowees": {
          url: urlBase + "/tags/:id/tagfollowees",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__delete__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Deletes all tagfollowees of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__tagfollowees": {
          url: urlBase + "/tags/:id/tagfollowees",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__count__tagfollowees
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Counts tagfollowees of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__tagfollowees": {
          url: urlBase + "/tags/:id/tagfollowees/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__get__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries timeline of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__get__timeline": {
          isArray: true,
          url: urlBase + "/tags/:id/timeline",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__create__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Creates a new instance in timeline of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$__create__timeline": {
          url: urlBase + "/tags/:id/timeline",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__delete__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Deletes all timeline of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__delete__timeline": {
          url: urlBase + "/tags/:id/timeline",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$__count__timeline
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Counts timeline of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "prototype$__count__timeline": {
          url: urlBase + "/tags/:id/timeline/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.articles() instead.
        "prototype$__get__articles": {
          isArray: true,
          url: urlBase + "/tags/:id/articles",
          method: "GET"
        },

        // INTERNAL. Use Tag.articles.create() instead.
        "prototype$__create__articles": {
          url: urlBase + "/tags/:id/articles",
          method: "POST"
        },

        // INTERNAL. Use Tag.articles.destroyAll() instead.
        "prototype$__delete__articles": {
          url: urlBase + "/tags/:id/articles",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.articles.count() instead.
        "prototype$__count__articles": {
          url: urlBase + "/tags/:id/articles/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.images() instead.
        "prototype$__get__images": {
          isArray: true,
          url: urlBase + "/tags/:id/images",
          method: "GET"
        },

        // INTERNAL. Use Tag.images.create() instead.
        "prototype$__create__images": {
          url: urlBase + "/tags/:id/images",
          method: "POST"
        },

        // INTERNAL. Use Tag.images.destroyAll() instead.
        "prototype$__delete__images": {
          url: urlBase + "/tags/:id/images",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.images.count() instead.
        "prototype$__count__images": {
          url: urlBase + "/tags/:id/images/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.discussions() instead.
        "prototype$__get__discussions": {
          isArray: true,
          url: urlBase + "/tags/:id/discussions",
          method: "GET"
        },

        // INTERNAL. Use Tag.discussions.create() instead.
        "prototype$__create__discussions": {
          url: urlBase + "/tags/:id/discussions",
          method: "POST"
        },

        // INTERNAL. Use Tag.discussions.destroyAll() instead.
        "prototype$__delete__discussions": {
          url: urlBase + "/tags/:id/discussions",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.discussions.count() instead.
        "prototype$__count__discussions": {
          url: urlBase + "/tags/:id/discussions/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.spaces() instead.
        "prototype$__get__spaces": {
          isArray: true,
          url: urlBase + "/tags/:id/spaces",
          method: "GET"
        },

        // INTERNAL. Use Tag.spaces.create() instead.
        "prototype$__create__spaces": {
          url: urlBase + "/tags/:id/spaces",
          method: "POST"
        },

        // INTERNAL. Use Tag.spaces.destroyAll() instead.
        "prototype$__delete__spaces": {
          url: urlBase + "/tags/:id/spaces",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.spaces.count() instead.
        "prototype$__count__spaces": {
          url: urlBase + "/tags/:id/spaces/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.products() instead.
        "prototype$__get__products": {
          isArray: true,
          url: urlBase + "/tags/:id/products",
          method: "GET"
        },

        // INTERNAL. Use Tag.products.create() instead.
        "prototype$__create__products": {
          url: urlBase + "/tags/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Tag.products.destroyAll() instead.
        "prototype$__delete__products": {
          url: urlBase + "/tags/:id/products",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.products.count() instead.
        "prototype$__count__products": {
          url: urlBase + "/tags/:id/products/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.posts() instead.
        "prototype$__get__posts": {
          isArray: true,
          url: urlBase + "/tags/:id/posts",
          method: "GET"
        },

        // INTERNAL. Use Tag.posts.create() instead.
        "prototype$__create__posts": {
          url: urlBase + "/tags/:id/posts",
          method: "POST"
        },

        // INTERNAL. Use Tag.posts.destroyAll() instead.
        "prototype$__delete__posts": {
          url: urlBase + "/tags/:id/posts",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.posts.count() instead.
        "prototype$__count__posts": {
          url: urlBase + "/tags/:id/posts/count",
          method: "GET"
        },

        // INTERNAL. Use Tag.projects() instead.
        "prototype$__get__projects": {
          isArray: true,
          url: urlBase + "/tags/:id/projects",
          method: "GET"
        },

        // INTERNAL. Use Tag.projects.create() instead.
        "prototype$__create__projects": {
          url: urlBase + "/tags/:id/projects",
          method: "POST"
        },

        // INTERNAL. Use Tag.projects.destroyAll() instead.
        "prototype$__delete__projects": {
          url: urlBase + "/tags/:id/projects",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.projects.count() instead.
        "prototype$__count__projects": {
          url: urlBase + "/tags/:id/projects/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#create
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/tags",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#createMany
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/tags",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#upsert
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/tags",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#exists
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/tags/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#findById
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/tags/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#find
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/tags",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#findOne
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/tags/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#updateAll
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/tags/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#deleteById
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/tags/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#count
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/tags/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#prototype$updateAttributes
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/tags/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tag#createChangeStream
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/tags/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Product.tags.findById() instead.
        "::findById::product::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.tags.destroyById() instead.
        "::destroyById::product::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.tags.updateById() instead.
        "::updateById::product::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.tags.link() instead.
        "::link::product::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.tags.unlink() instead.
        "::unlink::product::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.tags.exists() instead.
        "::exists::product::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Product.tags() instead.
        "::get::product::tags": {
          isArray: true,
          url: urlBase + "/products/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Product.tags.create() instead.
        "::create::product::tags": {
          url: urlBase + "/products/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Product.tags.createMany() instead.
        "::createMany::product::tags": {
          isArray: true,
          url: urlBase + "/products/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Product.tags.destroyAll() instead.
        "::delete::product::tags": {
          url: urlBase + "/products/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Product.tags.count() instead.
        "::count::product::tags": {
          url: urlBase + "/products/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Image.tags.findById() instead.
        "::findById::image::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.tags.destroyById() instead.
        "::destroyById::image::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.tags.updateById() instead.
        "::updateById::image::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.tags.link() instead.
        "::link::image::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.tags.unlink() instead.
        "::unlink::image::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.tags.exists() instead.
        "::exists::image::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Image.tags() instead.
        "::get::image::tags": {
          isArray: true,
          url: urlBase + "/images/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Image.tags.create() instead.
        "::create::image::tags": {
          url: urlBase + "/images/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Image.tags.createMany() instead.
        "::createMany::image::tags": {
          isArray: true,
          url: urlBase + "/images/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Image.tags.destroyAll() instead.
        "::delete::image::tags": {
          url: urlBase + "/images/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Image.tags.count() instead.
        "::count::image::tags": {
          url: urlBase + "/images/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Space.tags.findById() instead.
        "::findById::space::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.tags.destroyById() instead.
        "::destroyById::space::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.tags.updateById() instead.
        "::updateById::space::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.tags.link() instead.
        "::link::space::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.tags.unlink() instead.
        "::unlink::space::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.tags.exists() instead.
        "::exists::space::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Space.tags() instead.
        "::get::space::tags": {
          isArray: true,
          url: urlBase + "/spaces/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Space.tags.create() instead.
        "::create::space::tags": {
          url: urlBase + "/spaces/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Space.tags.createMany() instead.
        "::createMany::space::tags": {
          isArray: true,
          url: urlBase + "/spaces/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Space.tags.destroyAll() instead.
        "::delete::space::tags": {
          url: urlBase + "/spaces/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Space.tags.count() instead.
        "::count::space::tags": {
          url: urlBase + "/spaces/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Article.tags.findById() instead.
        "::findById::article::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.tags.destroyById() instead.
        "::destroyById::article::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.tags.updateById() instead.
        "::updateById::article::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.tags.link() instead.
        "::link::article::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.tags.unlink() instead.
        "::unlink::article::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.tags.exists() instead.
        "::exists::article::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Article.tags() instead.
        "::get::article::tags": {
          isArray: true,
          url: urlBase + "/articles/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Article.tags.create() instead.
        "::create::article::tags": {
          url: urlBase + "/articles/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Article.tags.createMany() instead.
        "::createMany::article::tags": {
          isArray: true,
          url: urlBase + "/articles/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Article.tags.destroyAll() instead.
        "::delete::article::tags": {
          url: urlBase + "/articles/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Article.tags.count() instead.
        "::count::article::tags": {
          url: urlBase + "/articles/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Discussion.tags.findById() instead.
        "::findById::discussion::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Discussion.tags.destroyById() instead.
        "::destroyById::discussion::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.tags.updateById() instead.
        "::updateById::discussion::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.tags.link() instead.
        "::link::discussion::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.tags.unlink() instead.
        "::unlink::discussion::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.tags.exists() instead.
        "::exists::discussion::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Discussion.tags() instead.
        "::get::discussion::tags": {
          isArray: true,
          url: urlBase + "/discussions/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Discussion.tags.create() instead.
        "::create::discussion::tags": {
          url: urlBase + "/discussions/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Discussion.tags.createMany() instead.
        "::createMany::discussion::tags": {
          isArray: true,
          url: urlBase + "/discussions/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Discussion.tags.destroyAll() instead.
        "::delete::discussion::tags": {
          url: urlBase + "/discussions/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.tags.count() instead.
        "::count::discussion::tags": {
          url: urlBase + "/discussions/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Project.tags.findById() instead.
        "::findById::project::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.tags.destroyById() instead.
        "::destroyById::project::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.tags.updateById() instead.
        "::updateById::project::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.tags.link() instead.
        "::link::project::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.tags.unlink() instead.
        "::unlink::project::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.tags.exists() instead.
        "::exists::project::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Project.tags() instead.
        "::get::project::tags": {
          isArray: true,
          url: urlBase + "/projects/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Project.tags.create() instead.
        "::create::project::tags": {
          url: urlBase + "/projects/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Project.tags.createMany() instead.
        "::createMany::project::tags": {
          isArray: true,
          url: urlBase + "/projects/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Project.tags.destroyAll() instead.
        "::delete::project::tags": {
          url: urlBase + "/projects/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Project.tags.count() instead.
        "::count::project::tags": {
          url: urlBase + "/projects/:id/tags/count",
          method: "GET"
        },

        // INTERNAL. Use Tagfollow.tagfollowee() instead.
        "::get::tagfollow::tagfollowee": {
          url: urlBase + "/tagfollows/:id/tagfollowee",
          method: "GET"
        },

        // INTERNAL. Use Tagtimeline.tag() instead.
        "::get::tagtimeline::tag": {
          url: urlBase + "/tagtimelines/:id/tag",
          method: "GET"
        },

        // INTERNAL. Use Post.tags.findById() instead.
        "::findById::post::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Post.tags.destroyById() instead.
        "::destroyById::post::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.tags.updateById() instead.
        "::updateById::post::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.tags.link() instead.
        "::link::post::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.tags.unlink() instead.
        "::unlink::post::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.tags.exists() instead.
        "::exists::post::tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Post.tags() instead.
        "::get::post::tags": {
          isArray: true,
          url: urlBase + "/posts/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Post.tags.create() instead.
        "::create::post::tags": {
          url: urlBase + "/posts/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Post.tags.createMany() instead.
        "::createMany::post::tags": {
          isArray: true,
          url: urlBase + "/posts/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Post.tags.destroyAll() instead.
        "::delete::post::tags": {
          url: urlBase + "/posts/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Post.tags.count() instead.
        "::count::post::tags": {
          url: urlBase + "/posts/:id/tags/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Tag#updateOrCreate
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Tag#update
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Tag#destroyById
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Tag#removeById
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Tag#modelName
    * @propertyOf lbServices.Tag
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Tag`.
    */
    R.modelName = "Tag";

    /**
     * @ngdoc object
     * @name lbServices.Tag.articles
     * @header lbServices.Tag.articles
     * @object
     * @description
     *
     * The object `Tag.articles` groups methods
     * manipulating `Article` instances related to `Tag`.
     *
     * Call {@link lbServices.Tag#articles Tag.articles()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Tag#articles
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries articles of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R.articles = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::get::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#count
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Counts articles of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.articles.count = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::count::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#create
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Creates a new instance in articles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R.articles.create = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::create::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#createMany
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Creates a new instance in articles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R.articles.createMany = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::createMany::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#destroyAll
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Deletes all articles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.articles.destroyAll = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::delete::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#destroyById
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Delete a related item by id for articles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for articles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.articles.destroyById = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::destroyById::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#exists
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Check the existence of articles relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for articles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R.articles.exists = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::exists::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#findById
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Find a related item by id for articles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for articles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R.articles.findById = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::findById::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#link
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Add a related item by id for articles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for articles
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R.articles.link = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::link::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#unlink
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Remove the articles relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for articles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.articles.unlink = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::unlink::tag::articles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.articles#updateById
         * @methodOf lbServices.Tag.articles
         *
         * @description
         *
         * Update a related item by id for articles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for articles
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Article` object.)
         * </em>
         */
        R.articles.updateById = function() {
          var TargetResource = $injector.get("Article");
          var action = TargetResource["::updateById::tag::articles"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Tag.images
     * @header lbServices.Tag.images
     * @object
     * @description
     *
     * The object `Tag.images` groups methods
     * manipulating `Image` instances related to `Tag`.
     *
     * Call {@link lbServices.Tag#images Tag.images()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Tag#images
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries images of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::get::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#count
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Counts images of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.images.count = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::count::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#create
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Creates a new instance in images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.create = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::create::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#createMany
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Creates a new instance in images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.createMany = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::createMany::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#destroyAll
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Deletes all images of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.destroyAll = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::delete::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#destroyById
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Delete a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.destroyById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::destroyById::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#exists
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Check the existence of images relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.exists = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::exists::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#findById
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Find a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.findById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::findById::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#link
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Add a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.link = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::link::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#unlink
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Remove the images relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.images.unlink = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::unlink::tag::images"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.images#updateById
         * @methodOf lbServices.Tag.images
         *
         * @description
         *
         * Update a related item by id for images.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for images
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Image` object.)
         * </em>
         */
        R.images.updateById = function() {
          var TargetResource = $injector.get("Image");
          var action = TargetResource["::updateById::tag::images"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Tag.discussions
     * @header lbServices.Tag.discussions
     * @object
     * @description
     *
     * The object `Tag.discussions` groups methods
     * manipulating `Discussion` instances related to `Tag`.
     *
     * Call {@link lbServices.Tag#discussions Tag.discussions()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Tag#discussions
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries discussions of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R.discussions = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::get::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#count
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Counts discussions of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.discussions.count = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::count::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#create
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Creates a new instance in discussions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R.discussions.create = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::create::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#createMany
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Creates a new instance in discussions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R.discussions.createMany = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::createMany::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#destroyAll
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Deletes all discussions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.discussions.destroyAll = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::delete::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#destroyById
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Delete a related item by id for discussions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for discussions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.discussions.destroyById = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::destroyById::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#exists
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Check the existence of discussions relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for discussions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R.discussions.exists = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::exists::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#findById
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Find a related item by id for discussions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for discussions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R.discussions.findById = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::findById::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#link
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Add a related item by id for discussions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for discussions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R.discussions.link = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::link::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#unlink
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Remove the discussions relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for discussions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.discussions.unlink = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::unlink::tag::discussions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.discussions#updateById
         * @methodOf lbServices.Tag.discussions
         *
         * @description
         *
         * Update a related item by id for discussions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for discussions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Discussion` object.)
         * </em>
         */
        R.discussions.updateById = function() {
          var TargetResource = $injector.get("Discussion");
          var action = TargetResource["::updateById::tag::discussions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Tag.spaces
     * @header lbServices.Tag.spaces
     * @object
     * @description
     *
     * The object `Tag.spaces` groups methods
     * manipulating `Space` instances related to `Tag`.
     *
     * Call {@link lbServices.Tag#spaces Tag.spaces()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Tag#spaces
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries spaces of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.spaces = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::get::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#count
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Counts spaces of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.spaces.count = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::count::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#create
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Creates a new instance in spaces of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.spaces.create = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::create::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#createMany
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Creates a new instance in spaces of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.spaces.createMany = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::createMany::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#destroyAll
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Deletes all spaces of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaces.destroyAll = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::delete::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#destroyById
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Delete a related item by id for spaces.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaces
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaces.destroyById = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::destroyById::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#exists
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Check the existence of spaces relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaces
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.spaces.exists = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::exists::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#findById
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Find a related item by id for spaces.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaces
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.spaces.findById = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::findById::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#link
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Add a related item by id for spaces.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaces
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.spaces.link = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::link::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#unlink
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Remove the spaces relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaces
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.spaces.unlink = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::unlink::tag::spaces"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.spaces#updateById
         * @methodOf lbServices.Tag.spaces
         *
         * @description
         *
         * Update a related item by id for spaces.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for spaces
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Space` object.)
         * </em>
         */
        R.spaces.updateById = function() {
          var TargetResource = $injector.get("Space");
          var action = TargetResource["::updateById::tag::spaces"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Tag.products
     * @header lbServices.Tag.products
     * @object
     * @description
     *
     * The object `Tag.products` groups methods
     * manipulating `Product` instances related to `Tag`.
     *
     * Call {@link lbServices.Tag#products Tag.products()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Tag#products
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries products of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#count
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Counts products of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.products.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#create
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Creates a new instance in products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#createMany
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Creates a new instance in products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#destroyAll
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Deletes all products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.products.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#destroyById
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Delete a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.products.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#exists
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Check the existence of products relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.exists = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::exists::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#findById
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Find a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#link
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Add a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.link = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::link::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#unlink
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Remove the products relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.products.unlink = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::unlink::tag::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.products#updateById
         * @methodOf lbServices.Tag.products
         *
         * @description
         *
         * Update a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::tag::products"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Tag.posts
     * @header lbServices.Tag.posts
     * @object
     * @description
     *
     * The object `Tag.posts` groups methods
     * manipulating `Post` instances related to `Tag`.
     *
     * Call {@link lbServices.Tag#posts Tag.posts()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Tag#posts
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries posts of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R.posts = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::get::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#count
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Counts posts of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.posts.count = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::count::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#create
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Creates a new instance in posts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R.posts.create = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::create::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#createMany
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Creates a new instance in posts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R.posts.createMany = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::createMany::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#destroyAll
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Deletes all posts of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.posts.destroyAll = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::delete::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#destroyById
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Delete a related item by id for posts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for posts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.posts.destroyById = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::destroyById::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#exists
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Check the existence of posts relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for posts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R.posts.exists = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::exists::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#findById
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Find a related item by id for posts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for posts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R.posts.findById = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::findById::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#link
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Add a related item by id for posts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for posts
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R.posts.link = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::link::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#unlink
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Remove the posts relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for posts
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.posts.unlink = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::unlink::tag::posts"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.posts#updateById
         * @methodOf lbServices.Tag.posts
         *
         * @description
         *
         * Update a related item by id for posts.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for posts
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R.posts.updateById = function() {
          var TargetResource = $injector.get("Post");
          var action = TargetResource["::updateById::tag::posts"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Tag.projects
     * @header lbServices.Tag.projects
     * @object
     * @description
     *
     * The object `Tag.projects` groups methods
     * manipulating `Project` instances related to `Tag`.
     *
     * Call {@link lbServices.Tag#projects Tag.projects()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Tag#projects
         * @methodOf lbServices.Tag
         *
         * @description
         *
         * Queries projects of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::get::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#count
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Counts projects of tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.projects.count = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::count::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#create
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Creates a new instance in projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.create = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::create::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#createMany
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Creates a new instance in projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.createMany = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::createMany::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#destroyAll
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Deletes all projects of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.projects.destroyAll = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::delete::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#destroyById
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Delete a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.projects.destroyById = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::destroyById::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#exists
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Check the existence of projects relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.exists = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::exists::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#findById
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Find a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.findById = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::findById::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#link
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Add a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.link = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::link::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#unlink
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Remove the projects relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.projects.unlink = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::unlink::tag::projects"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tag.projects#updateById
         * @methodOf lbServices.Tag.projects
         *
         * @description
         *
         * Update a related item by id for projects.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for projects
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Project` object.)
         * </em>
         */
        R.projects.updateById = function() {
          var TargetResource = $injector.get("Project");
          var action = TargetResource["::updateById::tag::projects"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Static-profile-builder
 * @header lbServices.Static-profile-builder
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Static-profile-builder` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Static-profile-builder",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/static-profile-builders/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#create
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/static-profile-builders",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#createMany
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/static-profile-builders",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#upsert
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/static-profile-builders",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#exists
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/static-profile-builders/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#findById
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/static-profile-builders/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#find
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/static-profile-builders",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#findOne
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/static-profile-builders/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#updateAll
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/static-profile-builders/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#deleteById
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/static-profile-builders/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#count
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/static-profile-builders/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#prototype$updateAttributes
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/static-profile-builders/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#createChangeStream
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/static-profile-builders/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#v1
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Profile Builder Data
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        "v1": {
          url: urlBase + "/static-profile-builders/v1",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#updateOrCreate
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#update
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#destroyById
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Static-profile-builder#removeById
         * @methodOf lbServices.Static-profile-builder
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Static-profile-builder` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Static-profile-builder#modelName
    * @propertyOf lbServices.Static-profile-builder
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Static-profile-builder`.
    */
    R.modelName = "Static-profile-builder";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Tagfollow
 * @header lbServices.Tagfollow
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tagfollow` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Tagfollow",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/tagfollows/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Tagfollow.tagfollower() instead.
        "prototype$__get__tagfollower": {
          url: urlBase + "/tagfollows/:id/tagfollower",
          method: "GET"
        },

        // INTERNAL. Use Tagfollow.tagfollowee() instead.
        "prototype$__get__tagfollowee": {
          url: urlBase + "/tagfollows/:id/tagfollowee",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#create
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/tagfollows",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#createMany
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/tagfollows",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#upsert
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/tagfollows",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#exists
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/tagfollows/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#findById
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/tagfollows/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#find
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/tagfollows",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#findOne
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/tagfollows/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#updateAll
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/tagfollows/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#deleteById
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/tagfollows/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#count
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/tagfollows/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#prototype$updateAttributes
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/tagfollows/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#createChangeStream
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/tagfollows/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#updateOrCreate
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#update
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#destroyById
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#removeById
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagfollow` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Tagfollow#modelName
    * @propertyOf lbServices.Tagfollow
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Tagfollow`.
    */
    R.modelName = "Tagfollow";


        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#tagfollower
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Fetches belongsTo relation tagfollower.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.tagfollower = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::tagfollow::tagfollower"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagfollow#tagfollowee
         * @methodOf lbServices.Tagfollow
         *
         * @description
         *
         * Fetches belongsTo relation tagfollowee.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tagfollowee = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::tagfollow::tagfollowee"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Tagtimeline
 * @header lbServices.Tagtimeline
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Tagtimeline` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Tagtimeline",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/tagtimelines/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Tagtimeline.tag() instead.
        "prototype$__get__tag": {
          url: urlBase + "/tagtimelines/:id/tag",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#prototype$__get__feed
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Fetches belongsTo relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/tagtimelines/:id/feed",
          method: "GET"
        },

        // INTERNAL. Use Tagtimeline.activities.findById() instead.
        "prototype$__findById__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tagtimeline.activities.destroyById() instead.
        "prototype$__destroyById__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tagtimeline.activities.updateById() instead.
        "prototype$__updateById__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tagtimeline.activities.link() instead.
        "prototype$__link__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tagtimeline.activities.unlink() instead.
        "prototype$__unlink__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tagtimeline.activities.exists() instead.
        "prototype$__exists__activities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tagtimelines/:id/activities/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tagtimeline.activities() instead.
        "prototype$__get__activities": {
          isArray: true,
          url: urlBase + "/tagtimelines/:id/activities",
          method: "GET"
        },

        // INTERNAL. Use Tagtimeline.activities.create() instead.
        "prototype$__create__activities": {
          url: urlBase + "/tagtimelines/:id/activities",
          method: "POST"
        },

        // INTERNAL. Use Tagtimeline.activities.destroyAll() instead.
        "prototype$__delete__activities": {
          url: urlBase + "/tagtimelines/:id/activities",
          method: "DELETE"
        },

        // INTERNAL. Use Tagtimeline.activities.count() instead.
        "prototype$__count__activities": {
          url: urlBase + "/tagtimelines/:id/activities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#create
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/tagtimelines",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#createMany
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/tagtimelines",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#upsert
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/tagtimelines",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#exists
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/tagtimelines/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#findById
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/tagtimelines/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#find
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/tagtimelines",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#findOne
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/tagtimelines/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#updateAll
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/tagtimelines/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#deleteById
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/tagtimelines/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#count
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/tagtimelines/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#prototype$updateAttributes
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/tagtimelines/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#createChangeStream
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/tagtimelines/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Activity.tagtimelines.findById() instead.
        "::findById::activity::tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/:fk",
          method: "GET"
        },

        // INTERNAL. Use Activity.tagtimelines.destroyById() instead.
        "::destroyById::activity::tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.tagtimelines.updateById() instead.
        "::updateById::activity::tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Activity.tagtimelines.link() instead.
        "::link::activity::tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Activity.tagtimelines.unlink() instead.
        "::unlink::activity::tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.tagtimelines.exists() instead.
        "::exists::activity::tagtimelines": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/activities/:id/tagtimelines/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Activity.tagtimelines() instead.
        "::get::activity::tagtimelines": {
          isArray: true,
          url: urlBase + "/activities/:id/tagtimelines",
          method: "GET"
        },

        // INTERNAL. Use Activity.tagtimelines.create() instead.
        "::create::activity::tagtimelines": {
          url: urlBase + "/activities/:id/tagtimelines",
          method: "POST"
        },

        // INTERNAL. Use Activity.tagtimelines.createMany() instead.
        "::createMany::activity::tagtimelines": {
          isArray: true,
          url: urlBase + "/activities/:id/tagtimelines",
          method: "POST"
        },

        // INTERNAL. Use Activity.tagtimelines.destroyAll() instead.
        "::delete::activity::tagtimelines": {
          url: urlBase + "/activities/:id/tagtimelines",
          method: "DELETE"
        },

        // INTERNAL. Use Activity.tagtimelines.count() instead.
        "::count::activity::tagtimelines": {
          url: urlBase + "/activities/:id/tagtimelines/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#updateOrCreate
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#update
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#destroyById
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#removeById
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tagtimeline` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Tagtimeline#modelName
    * @propertyOf lbServices.Tagtimeline
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Tagtimeline`.
    */
    R.modelName = "Tagtimeline";


        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#tag
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Fetches belongsTo relation tag.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tag = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::tagtimeline::tag"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Tagtimeline.activities
     * @header lbServices.Tagtimeline.activities
     * @object
     * @description
     *
     * The object `Tagtimeline.activities` groups methods
     * manipulating `Activity` instances related to `Tagtimeline`.
     *
     * Call {@link lbServices.Tagtimeline#activities Tagtimeline.activities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline#activities
         * @methodOf lbServices.Tagtimeline
         *
         * @description
         *
         * Queries activities of tagtimeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::get::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#count
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Counts activities of tagtimeline.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.activities.count = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::count::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#create
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Creates a new instance in activities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.create = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::create::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#createMany
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Creates a new instance in activities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.createMany = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::createMany::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#destroyAll
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Deletes all activities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.activities.destroyAll = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::delete::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#destroyById
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Delete a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.activities.destroyById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::destroyById::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#exists
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Check the existence of activities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.exists = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::exists::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#findById
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Find a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.findById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::findById::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#link
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Add a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.link = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::link::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#unlink
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Remove the activities relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.activities.unlink = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::unlink::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Tagtimeline.activities#updateById
         * @methodOf lbServices.Tagtimeline.activities
         *
         * @description
         *
         * Update a related item by id for activities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for activities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Activity` object.)
         * </em>
         */
        R.activities.updateById = function() {
          var TargetResource = $injector.get("Activity");
          var action = TargetResource["::updateById::tagtimeline::activities"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Share
 * @header lbServices.Share
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Share` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Share",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/shares/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Share.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/shares/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#prototype$__get__entityShare
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Fetches belongsTo relation entityShare.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "prototype$__get__entityShare": {
          url: urlBase + "/shares/:id/entityShare",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#create
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/shares",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#createMany
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/shares",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#upsert
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/shares",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#exists
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/shares/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#findById
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/shares/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#find
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/shares",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#findOne
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/shares/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#updateAll
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/shares/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#deleteById
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/shares/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#count
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/shares/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#prototype$updateAttributes
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/shares/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Share#createChangeStream
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/shares/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Product.shares.findById() instead.
        "::findById::product::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Product.shares.destroyById() instead.
        "::destroyById::product::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Product.shares.updateById() instead.
        "::updateById::product::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/products/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Product.shares() instead.
        "::get::product::shares": {
          isArray: true,
          url: urlBase + "/products/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Product.shares.create() instead.
        "::create::product::shares": {
          url: urlBase + "/products/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Product.shares.createMany() instead.
        "::createMany::product::shares": {
          isArray: true,
          url: urlBase + "/products/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Product.shares.destroyAll() instead.
        "::delete::product::shares": {
          url: urlBase + "/products/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Product.shares.count() instead.
        "::count::product::shares": {
          url: urlBase + "/products/:id/shares/count",
          method: "GET"
        },

        // INTERNAL. Use Image.shares.findById() instead.
        "::findById::image::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Image.shares.destroyById() instead.
        "::destroyById::image::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Image.shares.updateById() instead.
        "::updateById::image::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/images/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Image.shares() instead.
        "::get::image::shares": {
          isArray: true,
          url: urlBase + "/images/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Image.shares.create() instead.
        "::create::image::shares": {
          url: urlBase + "/images/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Image.shares.createMany() instead.
        "::createMany::image::shares": {
          isArray: true,
          url: urlBase + "/images/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Image.shares.destroyAll() instead.
        "::delete::image::shares": {
          url: urlBase + "/images/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Image.shares.count() instead.
        "::count::image::shares": {
          url: urlBase + "/images/:id/shares/count",
          method: "GET"
        },

        // INTERNAL. Use Space.shares.findById() instead.
        "::findById::space::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Space.shares.destroyById() instead.
        "::destroyById::space::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Space.shares.updateById() instead.
        "::updateById::space::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/spaces/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Space.shares() instead.
        "::get::space::shares": {
          isArray: true,
          url: urlBase + "/spaces/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Space.shares.create() instead.
        "::create::space::shares": {
          url: urlBase + "/spaces/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Space.shares.createMany() instead.
        "::createMany::space::shares": {
          isArray: true,
          url: urlBase + "/spaces/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Space.shares.destroyAll() instead.
        "::delete::space::shares": {
          url: urlBase + "/spaces/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Space.shares.count() instead.
        "::count::space::shares": {
          url: urlBase + "/spaces/:id/shares/count",
          method: "GET"
        },

        // INTERNAL. Use Article.shares.findById() instead.
        "::findById::article::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Article.shares.destroyById() instead.
        "::destroyById::article::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Article.shares.updateById() instead.
        "::updateById::article::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/articles/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Article.shares() instead.
        "::get::article::shares": {
          isArray: true,
          url: urlBase + "/articles/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Article.shares.create() instead.
        "::create::article::shares": {
          url: urlBase + "/articles/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Article.shares.createMany() instead.
        "::createMany::article::shares": {
          isArray: true,
          url: urlBase + "/articles/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Article.shares.destroyAll() instead.
        "::delete::article::shares": {
          url: urlBase + "/articles/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Article.shares.count() instead.
        "::count::article::shares": {
          url: urlBase + "/articles/:id/shares/count",
          method: "GET"
        },

        // INTERNAL. Use Discussion.shares.findById() instead.
        "::findById::discussion::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Discussion.shares.destroyById() instead.
        "::destroyById::discussion::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.shares.updateById() instead.
        "::updateById::discussion::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/discussions/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Discussion.shares() instead.
        "::get::discussion::shares": {
          isArray: true,
          url: urlBase + "/discussions/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Discussion.shares.create() instead.
        "::create::discussion::shares": {
          url: urlBase + "/discussions/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Discussion.shares.createMany() instead.
        "::createMany::discussion::shares": {
          isArray: true,
          url: urlBase + "/discussions/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Discussion.shares.destroyAll() instead.
        "::delete::discussion::shares": {
          url: urlBase + "/discussions/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Discussion.shares.count() instead.
        "::count::discussion::shares": {
          url: urlBase + "/discussions/:id/shares/count",
          method: "GET"
        },

        // INTERNAL. Use Project.shares.findById() instead.
        "::findById::project::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Project.shares.destroyById() instead.
        "::destroyById::project::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Project.shares.updateById() instead.
        "::updateById::project::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/projects/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Project.shares() instead.
        "::get::project::shares": {
          isArray: true,
          url: urlBase + "/projects/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Project.shares.create() instead.
        "::create::project::shares": {
          url: urlBase + "/projects/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Project.shares.createMany() instead.
        "::createMany::project::shares": {
          isArray: true,
          url: urlBase + "/projects/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Project.shares.destroyAll() instead.
        "::delete::project::shares": {
          url: urlBase + "/projects/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Project.shares.count() instead.
        "::count::project::shares": {
          url: urlBase + "/projects/:id/shares/count",
          method: "GET"
        },

        // INTERNAL. Use Post.shares.findById() instead.
        "::findById::post::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Post.shares.destroyById() instead.
        "::destroyById::post::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.shares.updateById() instead.
        "::updateById::post::shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.shares() instead.
        "::get::post::shares": {
          isArray: true,
          url: urlBase + "/posts/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Post.shares.create() instead.
        "::create::post::shares": {
          url: urlBase + "/posts/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Post.shares.createMany() instead.
        "::createMany::post::shares": {
          isArray: true,
          url: urlBase + "/posts/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Post.shares.destroyAll() instead.
        "::delete::post::shares": {
          url: urlBase + "/posts/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Post.shares.count() instead.
        "::count::post::shares": {
          url: urlBase + "/posts/:id/shares/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Share#updateOrCreate
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Share#update
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Share#destroyById
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Share#removeById
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Share#modelName
    * @propertyOf lbServices.Share
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Share`.
    */
    R.modelName = "Share";


        /**
         * @ngdoc method
         * @name lbServices.Share#page
         * @methodOf lbServices.Share
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::share::page"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Post
 * @header lbServices.Post
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Post` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Post",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/posts/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Post.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/posts/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#prototype$__get__feed
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Fetches hasOne relation feed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "prototype$__get__feed": {
          url: urlBase + "/posts/:id/feed",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#prototype$__create__feed
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Creates a new instance in feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "prototype$__create__feed": {
          url: urlBase + "/posts/:id/feed",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#prototype$__update__feed
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "prototype$__update__feed": {
          url: urlBase + "/posts/:id/feed",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#prototype$__destroy__feed
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Deletes feed of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "prototype$__destroy__feed": {
          url: urlBase + "/posts/:id/feed",
          method: "DELETE"
        },

        // INTERNAL. Use Post.likes.findById() instead.
        "prototype$__findById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/likes/:fk",
          method: "GET"
        },

        // INTERNAL. Use Post.likes.destroyById() instead.
        "prototype$__destroyById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/likes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.likes.updateById() instead.
        "prototype$__updateById__likes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/likes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.shares.findById() instead.
        "prototype$__findById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/shares/:fk",
          method: "GET"
        },

        // INTERNAL. Use Post.shares.destroyById() instead.
        "prototype$__destroyById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/shares/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.shares.updateById() instead.
        "prototype$__updateById__shares": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/shares/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.comments.findById() instead.
        "prototype$__findById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/comments/:fk",
          method: "GET"
        },

        // INTERNAL. Use Post.comments.destroyById() instead.
        "prototype$__destroyById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/comments/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.comments.updateById() instead.
        "prototype$__updateById__comments": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/comments/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.tags.findById() instead.
        "prototype$__findById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/:fk",
          method: "GET"
        },

        // INTERNAL. Use Post.tags.destroyById() instead.
        "prototype$__destroyById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.tags.updateById() instead.
        "prototype$__updateById__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.tags.link() instead.
        "prototype$__link__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Post.tags.unlink() instead.
        "prototype$__unlink__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Post.tags.exists() instead.
        "prototype$__exists__tags": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/posts/:id/tags/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Post.likes() instead.
        "prototype$__get__likes": {
          isArray: true,
          url: urlBase + "/posts/:id/likes",
          method: "GET"
        },

        // INTERNAL. Use Post.likes.create() instead.
        "prototype$__create__likes": {
          url: urlBase + "/posts/:id/likes",
          method: "POST"
        },

        // INTERNAL. Use Post.likes.destroyAll() instead.
        "prototype$__delete__likes": {
          url: urlBase + "/posts/:id/likes",
          method: "DELETE"
        },

        // INTERNAL. Use Post.likes.count() instead.
        "prototype$__count__likes": {
          url: urlBase + "/posts/:id/likes/count",
          method: "GET"
        },

        // INTERNAL. Use Post.shares() instead.
        "prototype$__get__shares": {
          isArray: true,
          url: urlBase + "/posts/:id/shares",
          method: "GET"
        },

        // INTERNAL. Use Post.shares.create() instead.
        "prototype$__create__shares": {
          url: urlBase + "/posts/:id/shares",
          method: "POST"
        },

        // INTERNAL. Use Post.shares.destroyAll() instead.
        "prototype$__delete__shares": {
          url: urlBase + "/posts/:id/shares",
          method: "DELETE"
        },

        // INTERNAL. Use Post.shares.count() instead.
        "prototype$__count__shares": {
          url: urlBase + "/posts/:id/shares/count",
          method: "GET"
        },

        // INTERNAL. Use Post.comments() instead.
        "prototype$__get__comments": {
          isArray: true,
          url: urlBase + "/posts/:id/comments",
          method: "GET"
        },

        // INTERNAL. Use Post.comments.create() instead.
        "prototype$__create__comments": {
          url: urlBase + "/posts/:id/comments",
          method: "POST"
        },

        // INTERNAL. Use Post.comments.destroyAll() instead.
        "prototype$__delete__comments": {
          url: urlBase + "/posts/:id/comments",
          method: "DELETE"
        },

        // INTERNAL. Use Post.comments.count() instead.
        "prototype$__count__comments": {
          url: urlBase + "/posts/:id/comments/count",
          method: "GET"
        },

        // INTERNAL. Use Post.tags() instead.
        "prototype$__get__tags": {
          isArray: true,
          url: urlBase + "/posts/:id/tags",
          method: "GET"
        },

        // INTERNAL. Use Post.tags.create() instead.
        "prototype$__create__tags": {
          url: urlBase + "/posts/:id/tags",
          method: "POST"
        },

        // INTERNAL. Use Post.tags.destroyAll() instead.
        "prototype$__delete__tags": {
          url: urlBase + "/posts/:id/tags",
          method: "DELETE"
        },

        // INTERNAL. Use Post.tags.count() instead.
        "prototype$__count__tags": {
          url: urlBase + "/posts/:id/tags/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#create
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/posts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#createMany
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/posts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#upsert
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/posts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#exists
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/posts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#findById
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/posts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#find
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/posts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#findOne
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/posts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#updateAll
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/posts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#deleteById
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/posts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#count
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/posts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#prototype$updateAttributes
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/posts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#createChangeStream
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/posts/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Tag.posts.findById() instead.
        "::findById::tag::posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/:fk",
          method: "GET"
        },

        // INTERNAL. Use Tag.posts.destroyById() instead.
        "::destroyById::tag::posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.posts.updateById() instead.
        "::updateById::tag::posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.posts.link() instead.
        "::link::tag::posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Tag.posts.unlink() instead.
        "::unlink::tag::posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.posts.exists() instead.
        "::exists::tag::posts": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/tags/:id/posts/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Tag.posts() instead.
        "::get::tag::posts": {
          isArray: true,
          url: urlBase + "/tags/:id/posts",
          method: "GET"
        },

        // INTERNAL. Use Tag.posts.create() instead.
        "::create::tag::posts": {
          url: urlBase + "/tags/:id/posts",
          method: "POST"
        },

        // INTERNAL. Use Tag.posts.createMany() instead.
        "::createMany::tag::posts": {
          isArray: true,
          url: urlBase + "/tags/:id/posts",
          method: "POST"
        },

        // INTERNAL. Use Tag.posts.destroyAll() instead.
        "::delete::tag::posts": {
          url: urlBase + "/tags/:id/posts",
          method: "DELETE"
        },

        // INTERNAL. Use Tag.posts.count() instead.
        "::count::tag::posts": {
          url: urlBase + "/tags/:id/posts/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Post#updateOrCreate
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Post#update
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Post#destroyById
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Post#removeById
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Post#modelName
    * @propertyOf lbServices.Post
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Post`.
    */
    R.modelName = "Post";


        /**
         * @ngdoc method
         * @name lbServices.Post#page
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::post::page"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Post.likes
     * @header lbServices.Post.likes
     * @object
     * @description
     *
     * The object `Post.likes` groups methods
     * manipulating `Like` instances related to `Post`.
     *
     * Call {@link lbServices.Post#likes Post.likes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Post#likes
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Queries likes of post.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::get::post::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.likes#count
         * @methodOf lbServices.Post.likes
         *
         * @description
         *
         * Counts likes of post.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.likes.count = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::count::post::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.likes#create
         * @methodOf lbServices.Post.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.create = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::create::post::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.likes#createMany
         * @methodOf lbServices.Post.likes
         *
         * @description
         *
         * Creates a new instance in likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.createMany = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::createMany::post::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.likes#destroyAll
         * @methodOf lbServices.Post.likes
         *
         * @description
         *
         * Deletes all likes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyAll = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::delete::post::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.likes#destroyById
         * @methodOf lbServices.Post.likes
         *
         * @description
         *
         * Delete a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.likes.destroyById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::destroyById::post::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.likes#findById
         * @methodOf lbServices.Post.likes
         *
         * @description
         *
         * Find a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.findById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::findById::post::likes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.likes#updateById
         * @methodOf lbServices.Post.likes
         *
         * @description
         *
         * Update a related item by id for likes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for likes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Like` object.)
         * </em>
         */
        R.likes.updateById = function() {
          var TargetResource = $injector.get("Like");
          var action = TargetResource["::updateById::post::likes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Post.shares
     * @header lbServices.Post.shares
     * @object
     * @description
     *
     * The object `Post.shares` groups methods
     * manipulating `Share` instances related to `Post`.
     *
     * Call {@link lbServices.Post#shares Post.shares()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Post#shares
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Queries shares of post.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::get::post::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.shares#count
         * @methodOf lbServices.Post.shares
         *
         * @description
         *
         * Counts shares of post.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.shares.count = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::count::post::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.shares#create
         * @methodOf lbServices.Post.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.create = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::create::post::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.shares#createMany
         * @methodOf lbServices.Post.shares
         *
         * @description
         *
         * Creates a new instance in shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.createMany = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::createMany::post::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.shares#destroyAll
         * @methodOf lbServices.Post.shares
         *
         * @description
         *
         * Deletes all shares of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyAll = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::delete::post::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.shares#destroyById
         * @methodOf lbServices.Post.shares
         *
         * @description
         *
         * Delete a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.shares.destroyById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::destroyById::post::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.shares#findById
         * @methodOf lbServices.Post.shares
         *
         * @description
         *
         * Find a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.findById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::findById::post::shares"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.shares#updateById
         * @methodOf lbServices.Post.shares
         *
         * @description
         *
         * Update a related item by id for shares.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for shares
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Share` object.)
         * </em>
         */
        R.shares.updateById = function() {
          var TargetResource = $injector.get("Share");
          var action = TargetResource["::updateById::post::shares"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Post.comments
     * @header lbServices.Post.comments
     * @object
     * @description
     *
     * The object `Post.comments` groups methods
     * manipulating `Comment` instances related to `Post`.
     *
     * Call {@link lbServices.Post#comments Post.comments()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Post#comments
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Queries comments of post.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::get::post::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.comments#count
         * @methodOf lbServices.Post.comments
         *
         * @description
         *
         * Counts comments of post.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.comments.count = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::count::post::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.comments#create
         * @methodOf lbServices.Post.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.create = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::create::post::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.comments#createMany
         * @methodOf lbServices.Post.comments
         *
         * @description
         *
         * Creates a new instance in comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.createMany = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::createMany::post::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.comments#destroyAll
         * @methodOf lbServices.Post.comments
         *
         * @description
         *
         * Deletes all comments of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyAll = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::delete::post::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.comments#destroyById
         * @methodOf lbServices.Post.comments
         *
         * @description
         *
         * Delete a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.comments.destroyById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::destroyById::post::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.comments#findById
         * @methodOf lbServices.Post.comments
         *
         * @description
         *
         * Find a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.findById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::findById::post::comments"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.comments#updateById
         * @methodOf lbServices.Post.comments
         *
         * @description
         *
         * Update a related item by id for comments.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for comments
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Comment` object.)
         * </em>
         */
        R.comments.updateById = function() {
          var TargetResource = $injector.get("Comment");
          var action = TargetResource["::updateById::post::comments"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Post.tags
     * @header lbServices.Post.tags
     * @object
     * @description
     *
     * The object `Post.tags` groups methods
     * manipulating `Tag` instances related to `Post`.
     *
     * Call {@link lbServices.Post#tags Post.tags()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Post#tags
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Queries tags of post.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` -
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::get::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#count
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Counts tags of post.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        R.tags.count = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::count::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#create
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.create = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::create::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#createMany
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Creates a new instance in tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.createMany = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::createMany::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#destroyAll
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Deletes all tags of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyAll = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::delete::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#destroyById
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Delete a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.destroyById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::destroyById::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#exists
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Check the existence of tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.exists = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::exists::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#findById
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Find a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.findById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::findById::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#link
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Add a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.link = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::link::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#unlink
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Remove the tags relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.tags.unlink = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::unlink::post::tags"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Post.tags#updateById
         * @methodOf lbServices.Post.tags
         *
         * @description
         *
         * Update a related item by id for tags.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for tags
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Tag` object.)
         * </em>
         */
        R.tags.updateById = function() {
          var TargetResource = $injector.get("Tag");
          var action = TargetResource["::updateById::post::tags"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.GetInTouch
 * @header lbServices.GetInTouch
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `GetInTouch` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "GetInTouch",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/getInTouches/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use GetInTouch.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/getInTouches/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#create
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/getInTouches",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#createMany
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/getInTouches",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#upsert
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/getInTouches",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#exists
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/getInTouches/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#findById
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/getInTouches/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#find
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/getInTouches",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#findOne
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/getInTouches/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#updateAll
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/getInTouches/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#deleteById
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/getInTouches/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#count
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/getInTouches/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#prototype$updateAttributes
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/getInTouches/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#createChangeStream
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/getInTouches/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#updateOrCreate
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#update
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#destroyById
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#removeById
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `GetInTouch` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.GetInTouch#modelName
    * @propertyOf lbServices.GetInTouch
    * @description
    * The name of the model represented by this $resource,
    * i.e. `GetInTouch`.
    */
    R.modelName = "GetInTouch";


        /**
         * @ngdoc method
         * @name lbServices.GetInTouch#page
         * @methodOf lbServices.GetInTouch
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::getInTouch::page"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Invite
 * @header lbServices.Invite
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Invite` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Invite",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/invites/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Invite.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/invites/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#create
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/invites",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#createMany
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/invites",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#upsert
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/invites",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#exists
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/invites/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#findById
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/invites/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#find
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/invites",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#findOne
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/invites/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#updateAll
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/invites/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#deleteById
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/invites/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#count
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/invites/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#prototype$updateAttributes
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/invites/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Invite#createChangeStream
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/invites/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Invite#updateOrCreate
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Invite#update
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Invite#destroyById
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Invite#removeById
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Invite` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Invite#modelName
    * @propertyOf lbServices.Invite
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Invite`.
    */
    R.modelName = "Invite";


        /**
         * @ngdoc method
         * @name lbServices.Invite#page
         * @methodOf lbServices.Invite
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::invite::page"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Contact
 * @header lbServices.Contact
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Contact` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Contact",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/contacts/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Contact.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/contacts/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#create
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/contacts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#createMany
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/contacts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#upsert
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/contacts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#exists
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/contacts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#findById
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/contacts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#find
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/contacts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#findOne
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/contacts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#updateAll
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/contacts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#deleteById
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/contacts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#count
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/contacts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#prototype$updateAttributes
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/contacts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Contact#createChangeStream
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/contacts/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Contact#updateOrCreate
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Contact#update
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Contact#destroyById
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Contact#removeById
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Contact` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Contact#modelName
    * @propertyOf lbServices.Contact
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Contact`.
    */
    R.modelName = "Contact";


        /**
         * @ngdoc method
         * @name lbServices.Contact#page
         * @methodOf lbServices.Contact
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::contact::page"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.MyPaint
 * @header lbServices.MyPaint
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `MyPaint` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "MyPaint",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/myPaints/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#create
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/myPaints",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#createMany
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/myPaints",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#upsert
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/myPaints",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#exists
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/myPaints/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#findById
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/myPaints/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#find
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/myPaints",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#findOne
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/myPaints/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#updateAll
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/myPaints/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#deleteById
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/myPaints/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#count
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/myPaints/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#prototype$updateAttributes
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/myPaints/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#createChangeStream
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/myPaints/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#upload
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Uploads a file
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `options` – `{object=}` -
         *
         * @param {Object} postData Request data.
         *
         *  - `ctx` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "upload": {
          url: urlBase + "/myPaints/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#wallPaintCreator
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Creates Wall paint shade
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `ctx` – `{object=}` -
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        "wallPaintCreator": {
          url: urlBase + "/myPaints/wallPaintCreator",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.MyPaint#updateOrCreate
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#update
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#destroyById
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.MyPaint#removeById
         * @methodOf lbServices.MyPaint
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `MyPaint` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.MyPaint#modelName
    * @propertyOf lbServices.MyPaint
    * @description
    * The name of the model represented by this $resource,
    * i.e. `MyPaint`.
    */
    R.modelName = "MyPaint";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Curation
 * @header lbServices.Curation
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Curation` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Curation",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/curations/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Curation.product() instead.
        "prototype$__get__product": {
          url: urlBase + "/curations/:id/product",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#create
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/curations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#createMany
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/curations",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#upsert
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/curations",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#exists
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/curations/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#findById
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/curations/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#find
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/curations",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#findOne
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/curations/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#updateAll
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/curations/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#deleteById
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/curations/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#count
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/curations/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#prototype$updateAttributes
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/curations/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Curation#createChangeStream
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/curations/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Curation#updateOrCreate
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Curation#update
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Curation#destroyById
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Curation#removeById
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Curation` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Curation#modelName
    * @propertyOf lbServices.Curation
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Curation`.
    */
    R.modelName = "Curation";


        /**
         * @ngdoc method
         * @name lbServices.Curation#product
         * @methodOf lbServices.Curation
         *
         * @description
         *
         * Fetches belongsTo relation product.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.product = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::curation::product"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Sendbird
 * @header lbServices.Sendbird
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Sendbird` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Sendbird",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/sendbirds/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Sendbird.page() instead.
        "prototype$__get__page": {
          url: urlBase + "/sendbirds/:id/page",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#create
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/sendbirds",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#createMany
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/sendbirds",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#upsert
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/sendbirds",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#exists
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` -
         */
        "exists": {
          url: urlBase + "/sendbirds/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#findById
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/sendbirds/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#find
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/sendbirds",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#findOne
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/sendbirds/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#updateAll
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        "updateAll": {
          url: urlBase + "/sendbirds/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#deleteById
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "deleteById": {
          url: urlBase + "/sendbirds/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#count
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` -
         */
        "count": {
          url: urlBase + "/sendbirds/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#prototype$updateAttributes
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/sendbirds/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#createChangeStream
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` -
         */
        "createChangeStream": {
          url: urlBase + "/sendbirds/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#getCordinator
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        "getCordinator": {
          url: urlBase + "/sendbirds/getCordinator",
          method: "GET"
        },

        // INTERNAL. Use Page.sendbirds() instead.
        "::get::page::sendbirds": {
          url: urlBase + "/pages/:id/sendbirds",
          method: "GET"
        },

        // INTERNAL. Use Page.sendbirds.create() instead.
        "::create::page::sendbirds": {
          url: urlBase + "/pages/:id/sendbirds",
          method: "POST"
        },

        // INTERNAL. Use Page.sendbirds.createMany() instead.
        "::createMany::page::sendbirds": {
          isArray: true,
          url: urlBase + "/pages/:id/sendbirds",
          method: "POST"
        },

        // INTERNAL. Use Page.sendbirds.update() instead.
        "::update::page::sendbirds": {
          url: urlBase + "/pages/:id/sendbirds",
          method: "PUT"
        },

        // INTERNAL. Use Page.sendbirds.destroy() instead.
        "::destroy::page::sendbirds": {
          url: urlBase + "/pages/:id/sendbirds",
          method: "DELETE"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Sendbird#updateOrCreate
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#update
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The number of instances updated
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#destroyById
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Sendbird#removeById
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Sendbird` object.)
         * </em>
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Sendbird#modelName
    * @propertyOf lbServices.Sendbird
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Sendbird`.
    */
    R.modelName = "Sendbird";


        /**
         * @ngdoc method
         * @name lbServices.Sendbird#page
         * @methodOf lbServices.Sendbird
         *
         * @description
         *
         * Fetches belongsTo relation page.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` -
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R.page = function() {
          var TargetResource = $injector.get("Page");
          var action = TargetResource["::get::sendbird::page"];
          return action.apply(R, arguments);
        };

    return R;
  }]);


module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      try {
        var key = propsPrefix + name;
        if (value == null) value = '';
        storage[key] = value;
      } catch(err) {
        console.log('Cannot access local/session storage:', err);
      }
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {

          // filter out external requests
          var host = getHost(config.url);
          if (host && host !== urlBaseHost) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      }
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
      urlBaseHost = getHost(urlBase) || location.host;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#getUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @description
     * Get the URL of the REST API server. The URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.getUrlBase = function() {
      return urlBase;
    };

    this.$get = ['$resource', function($resource) {
      return function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };
    }];
  });

})(window, window.angular);
